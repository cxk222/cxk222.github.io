<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ckの博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-07-26T12:58:08.142Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>06-数组</title>
    <link href="http://example.com/2021/07/26/javascript/day06-%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2021/07/26/javascript/day06-%E6%95%B0%E7%BB%84/</id>
    <published>2021-07-25T16:00:00.000Z</published>
    <updated>2021-07-26T12:58:08.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组基础"><a href="#数组基础" class="headerlink" title="数组基础"></a>数组基础</h3><h5 id="1-什么是数组"><a href="#1-什么是数组" class="headerlink" title="1. 什么是数组"></a>1. 什么是数组</h5><p>数组是一系列数据的集合，也就是我们把一些数据放在一个盒子里面，按照顺序排好,这个东西就是一个数组，存储着一些数据的集合</p><h5 id="2-数组数据类型Array"><a href="#2-数组数据类型Array" class="headerlink" title="2.数组数据类型Array"></a>2.数组数据类型Array</h5><ul><li><p>基本数据类型 : number/string/boolean/undefined/null</p></li><li><p>复杂数据类型 : object/function/array</p><span id="more"></span><h5 id="3-创建数组"><a href="#3-创建数组" class="headerlink" title="3.创建数组"></a>3.创建数组</h5></li><li><p>字面量创建数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = []</span><br><span class="line"><span class="comment">//创建一个有内容的数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure></li><li><p>内置构造函数创建数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line"><span class="comment">//创建一个长度为10的数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>)</span><br><span class="line"><span class="comment">//创建一个由内容的数组</span></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h5 id="4-数组的length"><a href="#4-数组的length" class="headerlink" title="4. 数组的length"></a>4. 数组的length</h5><p>表示数组的长度</p><h5 id="5-数组的索引"><a href="#5-数组的索引" class="headerlink" title="5. 数组的索引"></a>5. 数组的索引</h5></li><li><p>索引，也叫做下标，是指一个数据在数组里面排第几的位置</p></li><li><p>注意：在所有语言中，索引都是从<strong>0</strong>开始</p><h5 id="6-数组遍历"><a href="#6-数组遍历" class="headerlink" title="6.数组遍历"></a>6.数组遍历</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,]</span><br><span class="line"></span><br><span class="line"> <span class="comment">//使用for循环遍历数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(arr[i])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//会在控制台依次打出1，2，3，4，5，6</span></span><br></pre></td></tr></table></figure><h5 id="7-数据类型之间的存储区别"><a href="#7-数据类型之间的存储区别" class="headerlink" title="7. 数据类型之间的存储区别"></a>7. 数据类型之间的存储区别</h5></li><li><p>存储空间分为两种</p><ul><li>堆：主要存储复杂数据类型的内容</li><li>栈：主要存储基本数据类型的内容</li></ul></li><li><p>数据类型之间的比较</p><ul><li>基本数据类型是<strong>值</strong>之间的比较</li><li>复杂数据类型是<strong>地址</strong>之间的比较 <h5 id="8-数组常用的方法"><a href="#8-数组常用的方法" class="headerlink" title="8. 数组常用的方法"></a>8. 数组常用的方法</h5></li></ul></li><li><p>push-是用来在数组的末尾追加一个元素</p></li><li>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment">//使用push方法追加一个元素在末尾</span></span><br><span class="line">arr.push(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure></li><li><p>pop-是用来删除数组末尾的一个元素</p></li><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">  <span class="comment">//使用pop方法删除末尾的一个元素</span></span><br><span class="line">  arr.push()</span><br><span class="line">  <span class="built_in">console</span>.log(arr)<span class="comment">//[1,2]</span></span><br></pre></td></tr></table></figure></li><li><p>-unshift 是在数组的最前面添加一个元素</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment">//使用unshift方法向数组最前面添加一个元素</span></span><br><span class="line">arr.unshift(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//[4,1,2,3]</span></span><br></pre></td></tr></table></figure></li><li><p>shift 是删除数组最前面的一个元素</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment">//使用shift方法删除数组最前面的一个元素</span></span><br><span class="line">arr.shift()</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//[2,3]</span></span><br></pre></td></tr></table></figure></li><li><p>splice 是截取数组中的某些内容，按照数组的索引来截取</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="comment">//使用splice截取数组</span></span><br><span class="line">arr.splice(<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;内容&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//[1,‘内容’,4,5]</span></span><br><span class="line"><span class="comment">//arr.splice(1,2)表示从索引1开始截取2个内容</span></span><br><span class="line"><span class="comment">//第三个参数把截取完空出来的位置填充</span></span><br><span class="line"><span class="comment">//如果第三个参数没有填写，就是没有新内容替换截取的位置</span></span><br></pre></td></tr></table></figure></li><li><p>reverse 是用来反转数组使用的</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment">//使用reverse方法来反转数组</span></span><br><span class="line">arr.reverse()</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//[3,2,1]</span></span><br></pre></td></tr></table></figure></li><li><p>sort 是用来给数组排序的</p><ul><li>升序写法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line"><span class="comment">//使用sort方法给数组排序,默认升序</span></span><br><span class="line">arr.sort()</span><br><span class="line"><span class="built_in">console</span>.log(arr)<span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure></li><li>降序写法<br>```js<br>var arr = [2,3,1]<br>arr.sort(function(a,b){<pre><code>ruturn b - a</code></pre>})<br>console.log(arr)//[3,2,1]</li></ul></li><li><p>concat 是把多个数组进行拼接<br>  ```js<br>  var arr = [1,2,3]<br>  //使用concat方法拼接数组<br>  var newArr = arr.concat([4,5,6])<br>  console.log(arr)//[1,2,3]<br>  comsole.log(newArr)//[1,2,3,4,5,6]</p></li><li><p>join 是把数组里面的每一项内容链接起来，变成一个字符串</p><ul><li>可以自己定义每一项之间链接的内容 join(要以什么内容链接)</li><li>不会改变原始数组，而是把链接好的字符串返回<br>```js<br>var arr = [1,2,3]<br>//使用join链接数组<br>var str = arr.join(‘-‘)<br>console.log(arr)//[1,2,3]<br>console.log(str)//1-2-3</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;h3 id=&quot;数组基础&quot;&gt;&lt;a href=&quot;#数组基础&quot; class=&quot;headerlink&quot; title=&quot;数组基础&quot;&gt;&lt;/a&gt;数组基础&lt;/h3&gt;&lt;h5 id=&quot;1-什么是数组&quot;&gt;&lt;a href=&quot;#1-什么是数组&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是数组&quot;&gt;&lt;/a&gt;1. 什么是数组&lt;/h5&gt;&lt;p&gt;数组是一系列数据的集合，也就是我们把一些数据放在一个盒子里面，按照顺序排好,这个东西就是一个数组，存储着一些数据的集合&lt;/p&gt;
&lt;h5 id=&quot;2-数组数据类型Array&quot;&gt;&lt;a href=&quot;#2-数组数据类型Array&quot; class=&quot;headerlink&quot; title=&quot;2.数组数据类型Array&quot;&gt;&lt;/a&gt;2.数组数据类型Array&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基本数据类型 : number/string/boolean/undefined/null&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;复杂数据类型 : object/function/array&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="javascript" scheme="http://example.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>05-函数（下）</title>
    <link href="http://example.com/2021/07/23/javascript/05_%E5%87%BD%E6%95%B0(%E4%B8%8B)/"/>
    <id>http://example.com/2021/07/23/javascript/05_%E5%87%BD%E6%95%B0(%E4%B8%8B)/</id>
    <published>2021-07-22T16:00:00.000Z</published>
    <updated>2021-07-23T02:46:16.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数（下）"><a href="#函数（下）" class="headerlink" title="函数（下）"></a>函数（下）</h1><h2 id="作用域（重点）"><a href="#作用域（重点）" class="headerlink" title="作用域（重点）"></a>作用域（重点）</h2><ul><li>什么是作用域，就是一个变量可以生效的范围</li><li>变量不是在所有地方都可以使用的，而这个变量的使用范围就是作用域</li></ul><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><ul><li><p>全局作用域是最大的作用域</p></li><li><p>在全局作用域中定义的变量可以在任何地方使用</p></li><li><p>页面打开的时候，浏览器会自动给我们生成一个全局作用域 window</p></li><li><p>这个作用域会一直存在，直到页面关闭就销毁了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面两个变量都是存在在全局作用域下面的，都是可以在任意地方使用的</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">200</span></span><br></pre></td></tr></table></figure></li></ul><span id="more"></span><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><ul><li><p>局部作用域就是在全局作用域下面有开辟出来的一个相对小一些的作用域</p></li><li><p>在局部作用域中定义的变量只能在这个局部作用域内部使用</p></li><li><p><strong>在 JS 中只有函数能生成一个局部作用域，别的都不行</strong></p></li><li><p>每一个函数，都是一个局部作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个 num 是一个全局作用域下的变量 在任何地方都可以使用</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 下面这个变量就是一个 fn 局部作用域内部的变量</span></span><br><span class="line">  <span class="comment">// 只能在 fn 函数内部使用</span></span><br><span class="line">  <span class="keyword">var</span> num2 = <span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure></li></ul><h2 id="变量使用规则（重点）"><a href="#变量使用规则（重点）" class="headerlink" title="变量使用规则（重点）"></a>变量使用规则（重点）</h2><ul><li>有了作用域以后，变量就有了使用范围，也就有了使用规则</li><li>变量使用规则分为两种，<strong>访问规则</strong> 和 <strong>赋值规则</strong></li></ul><h3 id="访问规则"><a href="#访问规则" class="headerlink" title="访问规则"></a>访问规则</h3><ul><li><p>当我想获取一个变量的值的时候，我们管这个行为叫做 <strong>访问</strong></p></li><li><p>获取变量的规则： </p><ul><li>首先，在自己的作用域内部查找，如果有，就直接拿来使用</li><li>如果没有，就去上一级作用域查找，如果有，就拿来使用</li><li>如果没有，就继续去上一级作用域查找，依次类推</li><li>如果一直到全局作用域都没有这个变量，那么就会直接报错（该变量 is not defined）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num2 = <span class="number">200</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num3 = <span class="number">300</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(num3) <span class="comment">// 自己作用域内有，拿过来用</span></span><br><span class="line">    <span class="built_in">console</span>.log(num2) <span class="comment">// 自己作用域内没有，就去上一级，就是 fn 的作用域里面找，发现有，拿过来用</span></span><br><span class="line">    <span class="built_in">console</span>.log(num) <span class="comment">// 自己这没有，去上一级 fn 那里也没有，再上一级到全局作用域，发现有，直接用</span></span><br><span class="line">    <span class="built_in">console</span>.log(a) <span class="comment">// 自己没有，一级一级找上去到全局都没有，就会报错</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  fun()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure></li><li><p>变量的访问规则 也叫做 作用域的查找机制</p></li><li><p>作用域的查找机制只能是向上找，不能向下找</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 发现自己作用域没有，自己就是全局作用域，没有再上一级了，直接报错</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="赋值规则"><a href="#赋值规则" class="headerlink" title="赋值规则"></a>赋值规则</h3><ul><li><p>当你想给一个变量赋值的时候，那么就先要找到这个变量，在给他赋值</p></li><li><p>变量赋值规则：</p><ul><li>先在自己作用域内部查找，有就直接赋值</li><li>没有就去上一级作用域内部查找，有就直接赋值</li><li>在没有再去上一级作用域查找，有就直接赋值</li><li>如果一直找到全局作用域都没有，那么就把这个变量定义为全局变量，在给他赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  num = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn 调用以后，要给 num 赋值</span></span><br><span class="line"><span class="comment">// 查看自己的作用域内部没有 num 变量</span></span><br><span class="line"><span class="comment">// 就会向上一级查找</span></span><br><span class="line"><span class="comment">// 上一级就是全局作用域，发现依旧没有</span></span><br><span class="line"><span class="comment">// 那么就会把 num 定义为全局的变量，并为其赋值</span></span><br><span class="line"><span class="comment">// 所以 fn() 以后，全局就有了一个变量叫做 num 并且值是 100</span></span><br><span class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 100</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><ul><li><p>什么是递归函数</p></li><li><p>在编程世界里面，递归就是一个自己调用自己的手段</p></li><li><p>递归函数： 一个函数内部，调用了自己，循环往复</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面这个代码就是一个最简单的递归函数</span></span><br><span class="line"><span class="comment">// 在函数内部调用了自己，函数一执行，就调用自己一次，在调用再执行，循环往复，没有止尽</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fn()</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure></li><li><p>其实递归函数和循环很类似</p></li><li><p>需要有初始化，自增，执行代码，条件判断的，不然就是一个没有尽头的递归函数，我们叫做 <strong>死递归</strong></p></li></ul><h2 id="简单实现一个递归"><a href="#简单实现一个递归" class="headerlink" title="简单实现一个递归"></a>简单实现一个递归</h2><ul><li><p>我们先在用递归函数简单实现一个效果</p></li><li><p>需求： 求 1 至 5 的和</p><ul><li>先算 1 + 2 得 3</li><li>再算 3 + 3 得 6</li><li>再算 6 + 4 得 10 </li><li>再算 10 + 5 得 15</li><li>结束</li></ul></li><li><p>开始书写，写递归函数先要写结束条件（为了避免出现 “死递归”）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 传递进来的是 1</span></span><br><span class="line">  <span class="comment">// 当 n === 5 的时候要结束</span></span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>再写不满足条件的时候我们的递归处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 传递进来的是 1</span></span><br><span class="line">  <span class="comment">// 当 n === 5 的时候要结束</span></span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 不满足条件的时候，就是当前数字 + 比自己大 1 的数字</span></span><br><span class="line">    <span class="keyword">return</span> n + add(n + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> n + sum(n - <span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line">sum(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> method = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> n*method(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">method(<span class="number">3</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/WrMoJf"><img src="https://z3.ax1x.com/2021/07/23/WrMoJf.md.png" alt="递归"></a></p></li></ul><h2 id="简单了解对象"><a href="#简单了解对象" class="headerlink" title="简单了解对象"></a>简单了解对象</h2><ul><li><p>对象是一个复杂数据类型</p></li><li><p>其实说是复杂，但是没有很复杂，只不过是存储了一些基本数据类型的一个集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">num</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">str</span>: <span class="string">&#x27;hello world&#x27;</span>,</span><br><span class="line">  <span class="attr">boo</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这里的 <code>&#123;&#125;</code> 和函数中的 <code>&#123;&#125;</code> 不一样</p></li><li><p>函数里面的是写代码的，而对象里面是写一些数据的</p></li><li><p><strong>对象就是一个键值对的集合</strong></p></li><li><p><code>&#123;&#125;</code> 里面的每一个键都是一个成员</p></li><li><p>也就是说，我们可以把一些数据放在一个对象里面，那么他们就互不干扰了</p></li><li><p>其实就是我们准备一个房子，把我们想要的数据放进去，然后把房子的地址给到变量名，当我们需要某一个数据的时候，就可以根据变量名里面存储的地址找到对应的房子，然后去房子里面找到对应的数据</p></li></ul><h3 id="创建一个对象"><a href="#创建一个对象" class="headerlink" title="创建一个对象"></a>创建一个对象</h3><ul><li><p>字面量的方式创建一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个空对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 像对象中添加成员</span></span><br><span class="line">obj.name = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">obj.age = <span class="number">18</span></span><br></pre></td></tr></table></figure></li><li><p>内置构造函数的方式创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个空对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向对象中添加成员</span></span><br><span class="line">obj.name = <span class="string">&#x27;Rose&#x27;</span></span><br><span class="line">obj.age = <span class="number">20</span></span><br></pre></td></tr></table></figure><ul><li>Object 是 js 内置给我们的构造函数，用于创建一个对象使用的</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;函数（下）&quot;&gt;&lt;a href=&quot;#函数（下）&quot; class=&quot;headerlink&quot; title=&quot;函数（下）&quot;&gt;&lt;/a&gt;函数（下）&lt;/h1&gt;&lt;h2 id=&quot;作用域（重点）&quot;&gt;&lt;a href=&quot;#作用域（重点）&quot; class=&quot;headerlink&quot; title=&quot;作用域（重点）&quot;&gt;&lt;/a&gt;作用域（重点）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;什么是作用域，就是一个变量可以生效的范围&lt;/li&gt;
&lt;li&gt;变量不是在所有地方都可以使用的，而这个变量的使用范围就是作用域&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;全局作用域&quot;&gt;&lt;a href=&quot;#全局作用域&quot; class=&quot;headerlink&quot; title=&quot;全局作用域&quot;&gt;&lt;/a&gt;全局作用域&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;全局作用域是最大的作用域&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在全局作用域中定义的变量可以在任何地方使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;页面打开的时候，浏览器会自动给我们生成一个全局作用域 window&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这个作用域会一直存在，直到页面关闭就销毁了&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 下面两个变量都是存在在全局作用域下面的，都是可以在任意地方使用的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num2 = &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="javascript" scheme="http://example.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>04-函数（上）</title>
    <link href="http://example.com/2021/07/22/javascript/04_%E5%87%BD%E6%95%B0(%E4%B8%8A)/"/>
    <id>http://example.com/2021/07/22/javascript/04_%E5%87%BD%E6%95%B0(%E4%B8%8A)/</id>
    <published>2021-07-21T16:00:00.000Z</published>
    <updated>2021-07-22T14:47:14.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数（上）"><a href="#函数（上）" class="headerlink" title="函数（上）"></a>函数（上）</h1><ul><li>我们代码里面所说的函数和我们上学的时候学习的什么三角函数、二次函数之类的不是一个东西</li></ul><h2 id="函数的概念"><a href="#函数的概念" class="headerlink" title="函数的概念"></a>函数的概念</h2><ul><li><p>对于 js 来说，函数就是把任意一段代码放在一个 <strong>盒子</strong> 里面</p></li><li><p>在我想要让这段代码执行的时候，直接执行这个 <strong>盒子</strong> 里面的代码就行</p></li><li><p>先看一段代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个是我们以前写的一段代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数，这个 &#123;&#125; 就是那个 “盒子”</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这个函数我们以前写的代码</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><span id="more"></span><h2 id="函数的两个阶段（重点）"><a href="#函数的两个阶段（重点）" class="headerlink" title="函数的两个阶段（重点）"></a>函数的两个阶段（重点）</h2><ul><li>按照我们刚才的说法，两个阶段就是 <strong>放在盒子里面</strong> 和 <strong>让盒子里面的代码执行</strong></li></ul><h3 id="函数定义阶段"><a href="#函数定义阶段" class="headerlink" title="函数定义阶段"></a>函数定义阶段</h3><ul><li><p>定义阶段就是我们把代码 <strong>放在盒子里面</strong></p></li><li><p>我们就要学习怎么 <strong>放进去</strong>，也就是书写一个函数</p></li><li><p>我们有两种定义方式 <strong>声明式</strong> 和 <strong>赋值式</strong></p></li></ul><h4 id="声明式"><a href="#声明式" class="headerlink" title="声明式"></a>声明式</h4><ul><li><p>使用 <code>function</code> 这个关键字来声明一个函数</p></li><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 一段代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// function: 声明函数的关键字，表示接下来是一个函数了</span></span><br><span class="line"><span class="comment">// fn: 函数的名字，我们自己定义的（遵循变量名的命名规则和命名规范）</span></span><br><span class="line"><span class="comment">// (): 必须写，是用来放参数的位置（一会我们再聊）</span></span><br><span class="line"><span class="comment">// &#123;&#125;: 就是我们用来放一段代码的位置（也就是我们刚才说的 “盒子”）</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="赋值式"><a href="#赋值式" class="headerlink" title="赋值式"></a>赋值式</h4><ul><li><p>其实就是和我们使用 <code>var</code> 关键字是一个道理了</p></li><li><p>首先使用 <code>var</code> 定义一个变量，把一个函数当作值直接赋值给这个变量就可以了</p></li><li><p>语法： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 一段代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不需要在 function 后面书写函数的名字了，因为在前面已经有了</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="函数调用阶段"><a href="#函数调用阶段" class="headerlink" title="函数调用阶段"></a>函数调用阶段</h3><ul><li>就是让 <strong>盒子里面</strong> 的代码执行一下</li><li>让函数执行</li><li>两种定义函数的方式不同，但是调用函数的方式都以一样的</li></ul><h4 id="调用一个函数"><a href="#调用一个函数" class="headerlink" title="调用一个函数"></a>调用一个函数</h4><ul><li><p>函数调用就是直接写 <code>函数名()</code> 就可以了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明式函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我是 fn 函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">fn()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值式函数</span></span><br><span class="line"><span class="keyword">var</span> fn2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我是 fn2 函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure><ul><li>注意： <strong>定义完一个函数以后，如果没有函数调用，那么写在 {} 里面的代码没有意义，只有调用以后才会执行</strong></li></ul></li></ul><h4 id="调用上的区别"><a href="#调用上的区别" class="headerlink" title="调用上的区别"></a>调用上的区别</h4><ul><li><p>虽然两种定义方式的调用都是一样的，但是还是有一些区别的</p></li><li><p>声明式函数： 调用可以在 <strong>定义之前或者定义之后</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以调用</span></span><br><span class="line">fn()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明式函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我是 fn 函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以调用</span></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure></li><li><p>赋值式函数： 调用只能在 <strong>定义之前</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 会报错</span></span><br><span class="line">fn()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值式函数</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我是 fn 函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以调用</span></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure></li></ul><h2 id="函数的参数（重点）"><a href="#函数的参数（重点）" class="headerlink" title="函数的参数（重点）"></a>函数的参数（重点）</h2><ul><li><p>我们在定义函数和调用函数的时候都出现过 <code>()</code></p></li><li><p>现在我们就来说一下这个 <code>()</code> 的作用</p></li><li><p>就是用来放参数的位置</p></li><li><p>参数分为两种 <strong>行参</strong> 和 <strong>实参</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">行参写在这里</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 一段代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(实参写在这里)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值式函数</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params">行参写在这里</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 一段代码</span></span><br><span class="line">&#125;</span><br><span class="line">fn(实参写在这里)</span><br></pre></td></tr></table></figure></li></ul><h3 id="行参和实参的作用"><a href="#行参和实参的作用" class="headerlink" title="行参和实参的作用"></a>行参和实参的作用</h3><ol><li><p>行参</p><ul><li><p>就是在函数内部可以使用的变量，在函数外部不能使用</p></li><li><p>每写一个单词，就相当于在函数内部定义了一个可以使用的变量（遵循变量名的命名规则和命名规范）</p></li><li><p>多个单词之间以 <code>,</code> 分隔</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 书写一个参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在函数内部就可以使用 num 这个变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 在函数内部就可以使用 num 这个变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 书写两个参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在函数内部就可以使用 num1 和 num2 这两个变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun1 = <span class="function"><span class="keyword">function</span> (<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在函数内部就可以使用 num1 和 num2 这两个变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果只有行参的话，那么在函数内部使用的值个变量是没有值的，也就是 <code>undefined</code></p></li><li><p><strong>行参的值是在函数调用的时候由实参决定的</strong></p></li></ul></li><li><p>实参</p><ul><li><p>在函数调用的时候给行参赋值的</p></li><li><p>也就是说，在调用的时候是给一个实际的内容的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 函数内部可以使用 num </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数的本次调用，书写的实参是 100</span></span><br><span class="line"><span class="comment">// 那么本次调用的时候函数内部的 num 就是 100</span></span><br><span class="line">fn(<span class="number">100</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数的本次调用，书写的实参是 200</span></span><br><span class="line"><span class="comment">// 那么本次调用的时候函数内部的 num 就是 200</span></span><br><span class="line">fn(<span class="number">200</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>函数内部的行参的值，由函数调用的时候传递的实参决定</strong></p></li><li><p><strong>多个参数的时候，是按照顺序一一对应的</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 函数内部可以使用 num1 和 num2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数本次调用的时候，书写的参数是 100 和 200</span></span><br><span class="line"><span class="comment">// 那么本次调用的时候，函数内部的 num1 就是 100，num2 就是 200</span></span><br><span class="line">fn(<span class="number">100</span>, <span class="number">200</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="参数个数的关系"><a href="#参数个数的关系" class="headerlink" title="参数个数的关系"></a>参数个数的关系</h3><ol><li><p>行参比实参少</p><ul><li><p>因为是按照顺序一一对应的</p></li><li><p>行参少就会拿不到实参给的值，所以在函数内部就没有办法用到这个值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 函数内部可以使用 num1 和 num2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本次调用的时候，传递了两个实参，100 200 和 300</span></span><br><span class="line"><span class="comment">// 100 对应了 num1，200 对应了 num2，300 没有对应的变量</span></span><br><span class="line"><span class="comment">// 所以在函数内部就没有办法依靠变量来使用 300 这个值</span></span><br><span class="line">fn(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>行参比实参多</p><ul><li><p>因为是按照顺序一一对应的</p></li><li><p>所以多出来的行参就是没有值的，就是 <code>undefined</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num1, num2, num3</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 函数内部可以使用 num1 num2 和 num3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本次调用的时候，传递了两个实参，100 和 200</span></span><br><span class="line"><span class="comment">// 就分别对应了 num1 和 num2</span></span><br><span class="line"><span class="comment">// 而 num3 没有实参和其对应，那么 num3 的值就是 undefined</span></span><br><span class="line">fn(<span class="number">100</span>, <span class="number">200</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="函数的return（重点）"><a href="#函数的return（重点）" class="headerlink" title="函数的return（重点）"></a>函数的return（重点）</h2><ul><li>return 返回的意思，其实就是给函数一个 <strong>返回值</strong> 和 <strong>终断函数</strong></li></ul><h3 id="终断函数"><a href="#终断函数" class="headerlink" title="终断函数"></a>终断函数</h3><ul><li><p>当我开始执行函数以后，函数内部的代码就会从上到下的依次执行</p></li><li><p>必须要等到函数内的代码执行完毕</p></li><li><p>而 <code>return</code> 关键字就是可以在函数中间的位置停掉，让后面的代码不在继续执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 写了 return 以后，后面的 4 和 5 就不会继续执行了</span></span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数调用</span></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure></li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul><li><p>函数调用本身也是一个表达式，表达式就应该有一个值出现</p></li><li><p>现在的函数执行完毕之后，是不会有结果出现的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如 1 + 2 是一个表达式，那么 这个表达式的结果就是 3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> + <span class="number">2</span>) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 执行代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn() 也是一个表达式，这个表达式就没有结果出现</span></span><br><span class="line"><span class="built_in">console</span>.log(fn()) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li><p><code>return</code> 关键字就是可以给函数执行完毕一个结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 执行代码</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时，fn() 这个表达式执行完毕之后就有结果出现了</span></span><br><span class="line"><span class="built_in">console</span>.log(fn()) <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><ul><li>我们可以在函数内部使用 <code>return</code> 关键把任何内容当作这个函数运行后的结果</li></ul></li></ul><h2 id="函数的优点"><a href="#函数的优点" class="headerlink" title="函数的优点"></a>函数的优点</h2><ul><li>函数就是对一段代码的封装，在我们想调用的时候调用</li><li>函数的几个优点<ol><li>封装代码，使代码更加简洁</li><li>复用，在重复功能的时候直接调用就好</li><li>代码执行时机，随时可以在我们想要执行的时候执行</li></ol></li></ul><h2 id="预解析（重点）"><a href="#预解析（重点）" class="headerlink" title="预解析（重点）"></a>预解析（重点）</h2><ul><li><strong>预解析</strong> 其实就是聊聊 js 代码的编译和执行</li><li>js 是一个解释型语言，就是在代码执行之前，先对代码进行通读和解释，然后在执行代码</li><li>也就是说，我们的 js 代码在运行的时候，会经历两个环节 <strong>解释代码</strong> 和 <strong>执行代码</strong></li></ul><h3 id="解释代码"><a href="#解释代码" class="headerlink" title="解释代码"></a>解释代码</h3><ul><li><p>因为是在所有代码执行之前进行解释，所以叫做 <strong>预解析（预解释）</strong></p></li><li><p>需要解释的内容有两个</p><ul><li>声明式函数<ul><li>在内存中先声明有一个变量名是函数名，并且这个名字代表的内容是一个函数</li></ul></li><li><code>var</code> 关键字<ul><li>在内存中先声明有一个变量名</li></ul></li></ul></li><li><p>看下面一段代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fn()</span><br><span class="line"><span class="built_in">console</span>.log(num)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我是 fn 函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>经过预解析之后可以变形为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我是 fn 函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num</span><br><span class="line"></span><br><span class="line">fn()</span><br><span class="line"><span class="built_in">console</span>.log(num)</span><br><span class="line">num = <span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>赋值式函数会按照 <code>var</code> 关键字的规则进行预解析</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fn()</span><br><span class="line"><span class="built_in">console</span>.log(num)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我是 fn 函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="同名变量和函数解析方式"><a href="#同名变量和函数解析方式" class="headerlink" title="同名变量和函数解析方式"></a>同名变量和函数解析方式</h3><p>​     预解析，如果遇到同名变量和函数，函数优先</p><ul><li><p>案例: 以下代码执行后结果是什么?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fn()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我是 fn 函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br><span class="line"><span class="keyword">var</span> fn = <span class="number">100</span></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure><h3 id="if条件不管成不成立语句块都会解析"><a href="#if条件不管成不成立语句块都会解析" class="headerlink" title="if条件不管成不成立语句块都会解析"></a>if条件不管成不成立语句块都会解析</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">false</span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure><h3 id="return语句后代码不执行，但会进行预解析"><a href="#return语句后代码不执行，但会进行预解析" class="headerlink" title="return语句后代码不执行，但会进行预解析"></a>return语句后代码不执行，但会进行预解析</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num)</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;函数（上）&quot;&gt;&lt;a href=&quot;#函数（上）&quot; class=&quot;headerlink&quot; title=&quot;函数（上）&quot;&gt;&lt;/a&gt;函数（上）&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;我们代码里面所说的函数和我们上学的时候学习的什么三角函数、二次函数之类的不是一个东西&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;函数的概念&quot;&gt;&lt;a href=&quot;#函数的概念&quot; class=&quot;headerlink&quot; title=&quot;函数的概念&quot;&gt;&lt;/a&gt;函数的概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对于 js 来说，函数就是把任意一段代码放在一个 &lt;strong&gt;盒子&lt;/strong&gt; 里面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在我想要让这段代码执行的时候，直接执行这个 &lt;strong&gt;盒子&lt;/strong&gt; 里面的代码就行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;先看一段代码&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这个是我们以前写的一段代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 函数，这个 &amp;#123;&amp;#125; 就是那个 “盒子”&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 这个函数我们以前写的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="javascript" scheme="http://example.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>03-循环结构</title>
    <link href="http://example.com/2021/07/21/javascript/03_%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2021/07/21/javascript/03_%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</id>
    <published>2021-07-20T16:00:00.000Z</published>
    <updated>2021-07-23T02:08:11.671Z</updated>
    
    <content type="html"><![CDATA[<h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><ul><li>循环结构，就是根据某些给出的条件，重复的执行同一段代码</li><li>循环必须要有某些固定的内容组成<ol><li>初始化</li><li>条件判断</li><li>要执行的代码</li><li>自身改变</li></ol></li></ul><h2 id="WHILE-循环"><a href="#WHILE-循环" class="headerlink" title="WHILE 循环"></a>WHILE 循环</h2><p><a href="https://imgtu.com/i/WBFUJI"><img src="https://z3.ax1x.com/2021/07/22/WBFUJI.md.png" alt="WBFUJI.md.png"></a></p><ul><li><p><code>while</code>，中文叫 当…时，其实就是当条件满足时就执行代码，一旦不满足了就不执行了</p></li><li><p>语法 <code>while (条件) &#123; 满足条件就执行 &#125;</code></p></li><li><p>因为满足条件就执行，所以我们写的时候一定要注意，就是设定一个边界值，不然就一直循环下去了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 初始化条件</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 2. 条件判断</span></span><br><span class="line"><span class="keyword">while</span> (num &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="comment">// 3. 要执行的代码</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;当前的 num 的值是 &#x27;</span> + num)</span><br><span class="line">  <span class="comment">// 4. 自身改变</span></span><br><span class="line">  num = num + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果没有自身改变，那么就会一直循环不停了</li></ul></li></ul><h2 id="DO-WHILE-循环"><a href="#DO-WHILE-循环" class="headerlink" title="DO WHILE 循环"></a>DO WHILE 循环</h2><p><a href="https://imgtu.com/i/WBFaWt"><img src="https://z3.ax1x.com/2021/07/22/WBFaWt.md.png" alt="WBFaWt.md.png"></a></p><ul><li><p>是一个和 <code>while</code> 循环类似的循环</p></li><li><p><code>while</code> 会先进行条件判断，满足就执行，不满足直接就不执行了</p></li><li><p>但是 <code>do while</code> 循环是，先不管条件，先执行一回，然后在开始进行条件判断</p></li><li><p>语法： <code>do &#123; 要执行的代码 &#125; while (条件)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面这个代码，条件一开始就不满足，但是依旧会执行一次 do 后面 &#123;&#125; 内部的代码</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我执行了一次&#x27;</span>)</span><br><span class="line">  num = num + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">while</span> (num &lt; <span class="number">10</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="FOR-循环"><a href="#FOR-循环" class="headerlink" title="FOR 循环"></a>FOR 循环</h2><ul><li><p>和 <code>while</code> 和 <code>do while</code> 循环都不太一样的一种循环结构 </p></li><li><p>道理是和其他两种一样的，都是循环执行代码的</p></li><li><p>语法： <code>for (var i = 0; i &lt; 10; i++) &#123; 要执行的代码 &#125;</code></p></li></ul><p><a href="https://imgtu.com/i/WBFNFA"><img src="https://z3.ax1x.com/2021/07/22/WBFNFA.md.png" alt="WBFNFA.md.png"></a></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把初始化，条件判断，自身改变，写在了一起</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 这里写的是要执行的代码</span></span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台会依次输出 1 ~ 10 </span></span><br></pre></td></tr></table></figure><ul><li>这个只是看起来不太舒服，但是用起来比较好用</li></ul><h2 id="BREAK-终止循环-break"><a href="#BREAK-终止循环-break" class="headerlink" title="BREAK 终止循环 break"></a>BREAK 终止循环 break</h2><ul><li><p>在循环没有进行完毕的时候，因为我设置的条件满足，提前终止循环</p></li><li><p>比如：我要吃五个包子，吃到三个的时候，不能在吃了，我就停止吃包子这个事情</p></li><li><p>要终止循环，就可以直接使用 <code>break</code> 关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 没循环一次，吃一个包子</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我吃了一个包子&#x27;</span>)</span><br><span class="line">  <span class="comment">// 当 i 的值为 3 的时候，条件为 true，执行 &#123;&#125; 里面的代码终止循环</span></span><br><span class="line">  <span class="comment">// 循环就不会继续向下执行了，也就没有 4 和 5 了</span></span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="CONTINUE-结束本次循环-couninue"><a href="#CONTINUE-结束本次循环-couninue" class="headerlink" title="CONTINUE 结束本次循环 couninue"></a>CONTINUE 结束本次循环 couninue</h2><ul><li><p>在循环中，把循环的本次跳过去，继续执行后续的循环</p></li><li><p>比如：吃五个包子，到第三个的时候，第三个掉地下了，不吃了，跳过第三个，继续吃第四个和第五个</p></li><li><p>跳过本次循环，就可以使用 <code>continue</code> 关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 当 i 的值为 3 的时候，执行 &#123;&#125; 里面的代码</span></span><br><span class="line">  <span class="comment">// &#123;&#125; 里面有 continue，那么本次循环后面的代码就都不执行了</span></span><br><span class="line">  <span class="comment">// 自动算作 i 为 3 的这一次结束了，去继续执行 i = 4 的那次循环了</span></span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;这个是第三个包子，掉地下了，我不吃了&#x27;</span>)</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我吃了一个包子&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="双重for循环"><a href="#双重for循环" class="headerlink" title="双重for循环"></a><strong>双重for循环</strong></h2><p>for循环可以重复执行一个操作，当然也可以重复执行另一个循环，即for循环里面嵌套for循环，即双重for循环</p><p>循环的嵌套： 外层循环循环一次，内层就要循环完</p><p><strong>实例九九乘法表：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">          1x1=1 </span></span><br><span class="line"><span class="comment">          2x1=2 2x2=4 </span></span><br><span class="line"><span class="comment">          3x1=3 3x2=6 3x3=9 </span></span><br><span class="line"><span class="comment">          4x1=4 4x2=8 4x3=12 4x4=16 </span></span><br><span class="line"><span class="comment">          5x1=5 5x2=10 5x3=15 5x4=20 5x5=25 </span></span><br><span class="line"><span class="comment">          6x1=6 6x2=12 6x3=18 6x4=24 6x5=30 6x6=36 </span></span><br><span class="line"><span class="comment">          7x1=7 7x2=14 7x3=21 7x4=28 7x5=35 7x6=42 7x7=49 </span></span><br><span class="line"><span class="comment">          8x1=8 8x2=16 8x3=24 8x4=32 8x5=40 8x6=48 8x7=56 8x8=64 </span></span><br><span class="line"><span class="comment">          9x1=9 9x2=18 9x3=27 9x4=36 9x5=45 9x6=54 9x7=63 9x8=72 9x9=81 </span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">      <span class="keyword">var</span> i, j, str;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123; <span class="comment">//第一层for循环控制行数</span></span><br><span class="line">          str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">          <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= i; j++) &#123; <span class="comment">//第二层for循环控制列数</span></span><br><span class="line">              str += i + <span class="string">&quot;x&quot;</span> + j + <span class="string">&quot;=&quot;</span> + (i * j) + <span class="string">&quot; &quot;</span></span><br><span class="line">              <span class="built_in">document</span>.write(i+<span class="string">&#x27;x&#x27;</span>+j + <span class="string">&#x27;=&#x27;</span> + i*j +<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">document</span>.write(<span class="string">&#x27;&lt;br/&gt;&#x27;</span>)</span><br><span class="line">          <span class="built_in">console</span>.log(str);</span><br><span class="line">      &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/WBFUJI&quot;&gt;&lt;img src=&quot;https://z3.ax1x.com/2021/07/22/WBFUJI.md.png&quot; alt=&quot;封面&quot;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="javascript" scheme="http://example.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>02-逻辑分支</title>
    <link href="http://example.com/2021/07/20/javascript/02_%E9%80%BB%E8%BE%91%E5%88%86%E6%94%AF/"/>
    <id>http://example.com/2021/07/20/javascript/02_%E9%80%BB%E8%BE%91%E5%88%86%E6%94%AF/</id>
    <published>2021-07-19T16:00:00.000Z</published>
    <updated>2021-07-21T09:15:26.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><ul><li>我们的 js 代码都是顺序执行的（从上到下）</li><li>逻辑分支就是根据我们设定好的条件来决定要不要执行某些代码</li></ul><h2 id="IF-条件分支结构"><a href="#IF-条件分支结构" class="headerlink" title="IF 条件分支结构"></a>IF 条件分支结构</h2><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h3><ul><li><p>通过一个 if 语句来决定代码执行与否</p></li><li><p>语法： <code>if (条件) &#123; 要执行的代码 &#125;</code></p></li><li><p>通过 <code>()</code> 里面的条件是否成立来决定 <code>&#123;&#125;</code> 里面的代码是否执行</p></li></ul><span id="more"></span>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件为 true 的时候执行 &#123;&#125; 里面的代码</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  alert(<span class="string">&#x27;因为条件是 true，我会执行&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件为 false 的时候不执行 &#123;&#125; 里面的代码</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">alert(<span class="string">&#x27;因为条件是 false，我不会执行&#x27;</span>)    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="if-else-语句"><a href="#if-else-语句" class="headerlink" title="if else 语句"></a>if else 语句</h3><ul><li><p>通过 if 条件来决定，执行哪一个 <code>&#123;&#125;</code> 里面的代码</p></li><li><p>语法： <code>if (条件) &#123; 条件为 true 的时候执行 &#125; else &#123; 条件为 false 的时候执行 &#125;</code></p></li><li><p>两个 <code>&#123;&#125;</code> 内的代码一定有一个会执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件为 true 的时候，会执行 if 后面的 &#123;&#125; </span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  alert(<span class="string">&#x27;因为条件是 true，我会执行&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">&#x27;因为条件是 true，我不会执行&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件为 false 的时候，会执行 else 后面的 &#123;&#125;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  alert(<span class="string">&#x27;因为条件为 false，我不会执行&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">&#x27;因为条件为 false，我会执行&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="if-else-if-…-语句"><a href="#if-else-if-…-语句" class="headerlink" title="if else if … 语句"></a>if else if … 语句</h3><ul><li><p>可以通过 if 和 else if 来设置多个条件进行判断</p></li><li><p>语法：<code>if (条件1) &#123; 条件1为 true 的时候执行 &#125; else if (条件2) &#123; 条件2为 true 的时候执行 &#125;</code></p></li><li><p>会从头开始依次判断条件</p><ul><li>如果第一个条件为 true 了，那么就会执行后面的 <code>&#123;&#125;</code> 里面的内容</li><li>如果第一个条件为 false，那么就会判断第二个条件，依次类推</li></ul></li><li><p>多个 <code>&#123;&#125;</code> ，只会有一个被执行，一旦有一个条件为 true 了，后面的就不在判断了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个条件为 true，第二个条件为 false，最终会打印 “我是代码段1”</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  alert(<span class="string">&#x27;我是代码段1&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">alert(<span class="string">&#x27;我是代码段2&#x27;</span>)           </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个条件为 true，第二个条件为 true，最终会打印 “我是代码段1”</span></span><br><span class="line"><span class="comment">// 因为只要前面有一个条件满足了，就不会继续判断了</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  alert(<span class="string">&#x27;我是代码段1&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  alert(<span class="string">&#x27;我是代码段2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个条件为 false，第二个条件为 true，最终会打印 “我是代码段2”</span></span><br><span class="line"><span class="comment">// 只有前一个条件为 false 的时候才会继续向后判断</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  alert(<span class="string">&#x27;我是代码段1&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  alert(<span class="string">&#x27;我是代码段2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个条件为 false，第二个条件为 false，最终什么也不会发生</span></span><br><span class="line"><span class="comment">// 因为当所有条件都为 false 的时候，两个 &#123;&#125; 里面的代码都不会执行</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  alert(<span class="string">&#x27;我是代码段1&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  alert(<span class="string">&#x27;我是代码段2&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="if-else-if-…-else-语句"><a href="#if-else-if-…-else-语句" class="headerlink" title="if else if … else 语句"></a>if else if … else 语句</h3><ul><li><p>和之前的 <code>if else if ...</code> 基本一致，只不过是在所有条件都不满足的时候，执行最后 else 后面的 <code>&#123;&#125;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个条件为 false，第二个条件为 false，最终会打印 “我是代码段3”</span></span><br><span class="line"><span class="comment">// 只有前面所有的条件都不满足的时候会执行 else 后面的 &#123;&#125; 里面的代码</span></span><br><span class="line"><span class="comment">// 只要前面有一个条件满足了，那么后面的就都不会执行了</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  alert(<span class="string">&#x27;我是代码段1&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  alert(<span class="string">&#x27;我是代码段2&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert(<span class="string">&#x27;我是代码段3&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="SWITCH-条件分支结构"><a href="#SWITCH-条件分支结构" class="headerlink" title="SWITCH 条件分支结构"></a>SWITCH 条件分支结构</h2><ul><li><p>也是条件判断语句的一种</p></li><li><p>是对于某一个变量的判断</p></li><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (要判断的变量) &#123;</span><br><span class="line">  <span class="keyword">case</span> 情况<span class="number">1</span>:</span><br><span class="line">    情况<span class="number">1</span>要执行的代码</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> 情况<span class="number">2</span>:</span><br><span class="line">    情况<span class="number">2</span>要执行的代码</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> 情况<span class="number">3</span>:</span><br><span class="line">    情况<span class="number">3</span>要执行的代码</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    上述情况都不满足的时候执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>要判断某一个变量 等于 某一个值得时候使用</li></ul></li><li><p>例子🌰： 根据变量给出的数字显示是星期几</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> week = <span class="number">1</span></span><br><span class="line"><span class="keyword">switch</span> (week) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    alert(<span class="string">&#x27;星期一&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    alert(<span class="string">&#x27;星期二&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    alert(<span class="string">&#x27;星期三&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    alert(<span class="string">&#x27;星期四&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    alert(<span class="string">&#x27;星期五&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    alert(<span class="string">&#x27;星期六&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    alert(<span class="string">&#x27;星期日&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    alert(<span class="string">&#x27;请输入一个 1 ～ 7 之间的数字&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="三元运算（扩展）"><a href="#三元运算（扩展）" class="headerlink" title="三元运算（扩展）"></a>三元运算（扩展）</h2><ul><li><p>三元运算，就是用 <strong>两个符号</strong> 组成一个语句</p></li><li><p>三元运算只是对 <strong>if else</strong> 语句的一个简写形式</p></li><li><p>语法： <code>条件 ? 条件为 true 的时候执行 : 条件为 false 的时候执行</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">age &gt;= <span class="number">18</span> ? alert(<span class="string">&#x27;已经成年&#x27;</span>) : alert(<span class="string">&#x27;没有成年&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;分支结构&quot;&gt;&lt;a href=&quot;#分支结构&quot; class=&quot;headerlink&quot; title=&quot;分支结构&quot;&gt;&lt;/a&gt;分支结构&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;我们的 js 代码都是顺序执行的（从上到下）&lt;/li&gt;
&lt;li&gt;逻辑分支就是根据我们设定好的条件来决定要不要执行某些代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;IF-条件分支结构&quot;&gt;&lt;a href=&quot;#IF-条件分支结构&quot; class=&quot;headerlink&quot; title=&quot;IF 条件分支结构&quot;&gt;&lt;/a&gt;IF 条件分支结构&lt;/h2&gt;&lt;h3 id=&quot;if-语句&quot;&gt;&lt;a href=&quot;#if-语句&quot; class=&quot;headerlink&quot; title=&quot;if 语句&quot;&gt;&lt;/a&gt;if 语句&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过一个 if 语句来决定代码执行与否&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;语法： &lt;code&gt;if (条件) &amp;#123; 要执行的代码 &amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过 &lt;code&gt;()&lt;/code&gt; 里面的条件是否成立来决定 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt; 里面的代码是否执行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="javascript" scheme="http://example.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>01-js语法基础</title>
    <link href="http://example.com/2021/07/19/javascript/01_JS%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2021/07/19/javascript/01_JS%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</id>
    <published>2021-07-18T16:00:00.000Z</published>
    <updated>2021-07-24T06:12:08.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js语法基础"><a href="#js语法基础" class="headerlink" title="js语法基础"></a>js语法基础</h1><h4 id="一、发展历史"><a href="#一、发展历史" class="headerlink" title="一、发展历史"></a>一、发展历史</h4><p>1.javascript是1995年网景公司雇佣布兰登(Brendan Eich)开发的全新语言。<br>2.javascript最初是为了实现浏览器客户端交互<br>3.ECMAScript与javascript关系<br><code>前者是后者的规格，后者是前者的一种实现</code></p><h4 id="二、书写位置"><a href="#二、书写位置" class="headerlink" title="二、书写位置"></a>二、书写位置</h4><p>  行内式 内嵌式 外链式<br>  <span id="more"></span></p><h4 id="三、变量"><a href="#三、变量" class="headerlink" title="三、变量"></a>三、变量</h4><p>1.语法 <code>var 变量名 = 值</code><br>2.注意：</p><blockquote><p>  1）一个变量名只能存储一个值<br>    2）再次赋值时会覆盖前一次的值<br>    3）变量名称区分大小写</p></blockquote><p>3.命名规范—-语义化、驼峰命名</p><blockquote><ul><li>一个变量名称可以有数字、字母、英文、下划线、美元符号$组成；</li><li>区分大小写；</li><li>不能由数字开头，不能使用中文；</li><li>不能是保留字或关键字；</li><li>不能出现空格；</li></ul></blockquote><h4 id="四、数据类型"><a href="#四、数据类型" class="headerlink" title="四、数据类型"></a>四、数据类型</h4><ol><li><p>基本数据类型<br> 1）数值类型（number）————NaN非数值，也是数值类型<br> 2）字符串类型（String）————被引号包括的所有内容<br> 3）布尔类型（boolean）————true/false<br> 4）未定义的（undefined）<br> 5）空类型（null）</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数值类型</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">100</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;a=&#x27;</span>,a,<span class="string">&#x27;a的类型=&#x27;</span>,<span class="keyword">typeof</span>(a))</span><br><span class="line"><span class="comment">// 字符串类型</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&#x27;内容&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;b=&#x27;</span>,b,<span class="string">&#x27;b的类型=&#x27;</span>,<span class="keyword">typeof</span>(b))</span><br><span class="line"><span class="comment">// 布尔类型</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">true</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="literal">false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;c/d=&#x27;</span>,c,d,<span class="string">&#x27;c/d的数据类型=&#x27;</span>,<span class="keyword">typeof</span>(c),<span class="keyword">typeof</span>(d))</span><br><span class="line"><span class="comment">// 未定义的类型</span></span><br><span class="line"><span class="keyword">var</span> e = <span class="literal">undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;e=&#x27;</span>,e,<span class="string">&#x27;e的数据类型=&#x27;</span>,<span class="keyword">typeof</span>(e))</span><br><span class="line"><span class="comment">// 空类型</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="literal">null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;f=&#x27;</span>,f,<span class="string">&#x27;f的数据类型&#x27;</span>,<span class="keyword">typeof</span>(f))</span><br></pre></td></tr></table></figure></li><li><p>复杂数据类型————对象类型 object/函数类型 function等</p></li><li><p>判断数据类型 typeof</p></li><li><p>数据类型转换<br> 1）其他数据类型 ==&gt; number</p><ul><li>Number(变量)<br>空字符串转换为0 &emsp; 非数字字符串/undefined——&gt;NaN &emsp; true为0，flase为0 &emsp; null——&gt;0<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据类型转换</span></span><br><span class="line"><span class="keyword">var</span> g = <span class="number">200</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">var</span> h = <span class="built_in">Number</span>(g)</span><br><span class="line"><span class="keyword">var</span> j = <span class="built_in">Number</span>(i)</span><br><span class="line"><span class="built_in">console</span>.log(h,<span class="keyword">typeof</span>(h),j,<span class="keyword">typeof</span>(j))</span><br></pre></td></tr></table></figure></li></ul><ul><li>parseInt(变量)<ul><li>从第一位开始检查，是数字就转换，知道一个不是数字的内容</li><li>开头就不是数字，那么直接返回NaN</li><li>不认识小数点，只能保留整数</li></ul></li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 小数取整</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">100.5</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="built_in">parseInt</span>(m)</span><br><span class="line"><span class="keyword">var</span> s = <span class="built_in">parseFloat</span>(m)</span><br><span class="line"><span class="built_in">console</span>.log(n,<span class="keyword">typeof</span>(n))</span><br><span class="line"><span class="built_in">console</span>.log(s,<span class="keyword">typeof</span>(s))</span><br></pre></td></tr></table></figure><ul><li>parseFloat<ul><li>从第一位开始检查，是数字就转换，知道一个不是数字的内容</li><li>开头就不是数字，那么直接返回NaN</li><li>认识一次小数点</li></ul></li><li>隐式转换（除加法以外的运算）<ul><li>运算符两边都是可运算数字才行</li><li>如果运算符任何一遍不是一个可运算数字，那么就会返回NaN</li><li>加法不可以用</li></ul></li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 隐式转换</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">200</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> z = x-y</span><br><span class="line"><span class="built_in">console</span>.log(z)</span><br></pre></td></tr></table></figure><p> 2)其他类型转换成字符串</p><ul><li>变量.toString()<br> 有一些数据类型不能使用tostring()方法，比如undefined和null</li><li>String(变量)<br> 所有数据类型都可以</li><li>使用加法运算<ul><li>在JS里面，＋由两个含义</li><li>字符串拼接:只要＋任意一边是字符串，就会进行字符串拼接</li><li>加法运算:只有+两边都是数字的时候，才会进行数学运算</li></ul></li></ul><p> 3）其他数据变成布尔</p><h4 id="五、运算符"><a href="#五、运算符" class="headerlink" title="五、运算符"></a>五、运算符</h4><ol><li>数学运算符<br>1）+<br>&emsp;只有两边都是数字才会进行加法运算<br>&emsp;两边只要有任意一边是字符串就会进行字符串拼接<br>2）-<br>&emsp; 会自动执行减法运算<br>&emsp; 会自动把两边都转换为数字进行运算<br>3）*<br>&emsp; 会自动执行乘法运算<br>&emsp; 会自动把两边都转换为数字进行运算<br>4）/<br>&emsp; 会自动执行除法运算<br>&emsp; 会自动把两边都转换为数字进行运算<br>5）%<br>&emsp; 会自动执行余数运算<br>&emsp; 会自动把两边都转换为数字进行运算</li><li>赋值运算符<br><code>=</code><br>&emsp; 把 = 右边的赋值给 = 左边的变量名<br><code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code></li><li>比较运算符<br><code>&gt;=</code> <code>&lt;=</code> <code>&gt;</code> <code>&lt;</code></li><li>逻辑运算符<br><code>&amp;&amp;且</code> <code>||或</code> <code>!非</code></li><li>自增自减运算符<br><code>++在前</code> 先加1 再运算 再赋值<br><code>++在后</code> 先运算 再赋值 再加1</li><li>条件运算符<br><code>三目运算符</code></li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;js语法基础&quot;&gt;&lt;a href=&quot;#js语法基础&quot; class=&quot;headerlink&quot; title=&quot;js语法基础&quot;&gt;&lt;/a&gt;js语法基础&lt;/h1&gt;&lt;h4 id=&quot;一、发展历史&quot;&gt;&lt;a href=&quot;#一、发展历史&quot; class=&quot;headerlink&quot; title=&quot;一、发展历史&quot;&gt;&lt;/a&gt;一、发展历史&lt;/h4&gt;&lt;p&gt;1.javascript是1995年网景公司雇佣布兰登(Brendan Eich)开发的全新语言。&lt;br&gt;2.javascript最初是为了实现浏览器客户端交互&lt;br&gt;3.ECMAScript与javascript关系&lt;br&gt;&lt;code&gt;前者是后者的规格，后者是前者的一种实现&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;二、书写位置&quot;&gt;&lt;a href=&quot;#二、书写位置&quot; class=&quot;headerlink&quot; title=&quot;二、书写位置&quot;&gt;&lt;/a&gt;二、书写位置&lt;/h4&gt;&lt;p&gt;  行内式 内嵌式 外链式&lt;br&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="javascript" scheme="http://example.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>2D、3D转换</title>
    <link href="http://example.com/2021/07/13/html%E5%92%8Ccss/2D%E3%80%813D%E8%BD%AC%E6%8D%A2/"/>
    <id>http://example.com/2021/07/13/html%E5%92%8Ccss/2D%E3%80%813D%E8%BD%AC%E6%8D%A2/</id>
    <published>2021-07-12T16:00:00.000Z</published>
    <updated>2021-08-05T12:16:57.926Z</updated>
    
    <content type="html"><![CDATA[<h4 id="变形-位移，旋转，放缩，斜切"><a href="#变形-位移，旋转，放缩，斜切" class="headerlink" title="变形 : 位移，旋转，放缩，斜切"></a>变形 : 位移，旋转，放缩，斜切</h4><ul><li>tansform<ul><li>位移:transform:translate(X,Y);</li><li>旋转:transform:rotate(* deg);</li><li>放缩:transform:scale(x,y); X代表宽度变化的倍数，Y代表高度变化的倍数</li><li>倾斜:transform:skew()</li></ul></li><li>改变元素变形的基点<br>  transform-origin: x,y;</li><li>景深【元素距离用户眼睛的距离】<br>  perspective: 0px;</li><li>转换成3D空间<br>  transform-style: preserve-3d;</li></ul><span id="more"></span><h4 id="多列布局"><a href="#多列布局" class="headerlink" title="多列布局"></a>多列布局</h4><ul><li>column-width:240px;  列宽</li><li>column-count:3;  列数</li><li>column-gap:10px;  列与列之间的间隔</li><li>column-rule:1px solid red;  列边框</li></ul><p><strong>z-index: 元素在z轴上的堆叠层次</strong></p><ul><li>z-index: 数字;</li><li>元素默认值都为0，值大的盖住值小的。</li><li>该属性要生效，必须在身上要有非静态定位才行。</li></ul><p><strong>三角形实现步骤</strong></p><ol><li>设置一个div宽高为0;</li><li>设置div四边框为透明色 transparent</li><li>设置三角形对应方向边框颜色</li></ol><p><strong>选择器：</strong><br>    a+b:相邻                选中a相邻的兄弟b【只往后看】<br>    a~b:同级兄弟            选中a后面的所有兄弟</p><p>变形顺序会影响实际效果  </p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;变形-位移，旋转，放缩，斜切&quot;&gt;&lt;a href=&quot;#变形-位移，旋转，放缩，斜切&quot; class=&quot;headerlink&quot; title=&quot;变形 : 位移，旋转，放缩，斜切&quot;&gt;&lt;/a&gt;变形 : 位移，旋转，放缩，斜切&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;tansform&lt;ul&gt;
&lt;li&gt;位移:transform:translate(X,Y);&lt;/li&gt;
&lt;li&gt;旋转:transform:rotate(* deg);&lt;/li&gt;
&lt;li&gt;放缩:transform:scale(x,y); X代表宽度变化的倍数，Y代表高度变化的倍数&lt;/li&gt;
&lt;li&gt;倾斜:transform:skew()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;改变元素变形的基点&lt;br&gt;  transform-origin: x,y;&lt;/li&gt;
&lt;li&gt;景深【元素距离用户眼睛的距离】&lt;br&gt;  perspective: 0px;&lt;/li&gt;
&lt;li&gt;转换成3D空间&lt;br&gt;  transform-style: preserve-3d;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="html,css" scheme="http://example.com/categories/html-css/"/>
    
    
    <category term="html,css" scheme="http://example.com/tags/html-css/"/>
    
  </entry>
  
  <entry>
    <title>响应式</title>
    <link href="http://example.com/2021/07/12/html%E5%92%8Ccss/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    <id>http://example.com/2021/07/12/html%E5%92%8Ccss/%E5%93%8D%E5%BA%94%E5%BC%8F/</id>
    <published>2021-07-11T16:00:00.000Z</published>
    <updated>2021-08-05T12:12:54.991Z</updated>
    
    <content type="html"><![CDATA[<h2 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h2><ul><li><p>概念:任何尺寸的屏幕都会有一个适当的效果</p></li><li><p>移动端实现响应式</p><ol><li>使用百分比</li><li>用rem配合js使用<br> rem:基于html字体大小<br> <code>*rem = 量取的宽度*100/750     (rem = px/7.5)</code></li><li>使用vw和vh<br> 任意屏幕宽 = 100vw<br> X px = Y vw<br> <code>*vw = 量取的宽度*100/设计图的宽度</code></li></ol></li><li><p>移动端必须设置视口<br>  viewport</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> 设备 <span class="keyword">and</span> (条件) <span class="keyword">and</span> (条件)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设备 all所有设备  screen屏幕  print打印机</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;响应式&quot;&gt;&lt;a href=&quot;#响应式&quot; class=&quot;headerlink&quot; title=&quot;响应式&quot;&gt;&lt;/a&gt;响应式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;概念:任何尺寸的屏幕都会有一个适当的效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;移动端实现响应式&lt;/p&gt;
&lt;ol&gt;
&lt;</summary>
      
    
    
    
    <category term="html,css" scheme="http://example.com/categories/html-css/"/>
    
    
    <category term="html,css" scheme="http://example.com/tags/html-css/"/>
    
  </entry>
  
  <entry>
    <title>弹性盒子</title>
    <link href="http://example.com/2021/07/09/html%E5%92%8Ccss/%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90/"/>
    <id>http://example.com/2021/07/09/html%E5%92%8Ccss/%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90/</id>
    <published>2021-07-08T16:00:00.000Z</published>
    <updated>2021-08-05T12:10:17.452Z</updated>
    
    <content type="html"><![CDATA[<h2 id="弹性盒子"><a href="#弹性盒子" class="headerlink" title="弹性盒子"></a>弹性盒子</h2><h4 id="弹性盒子概念"><a href="#弹性盒子概念" class="headerlink" title="弹性盒子概念"></a>弹性盒子概念</h4><ul><li>概念：是一种新的布局方式，让容器有能力控制里面元素的排列方式。</li><li>容器：被设置了display: flex;的元素</li><li>项目：容器里的子元素就是项目</li><li>主轴：元素排列的方向，默认为X轴;</li><li>侧轴：垂直于主轴的方向，默认为Y轴;</li></ul><span id="more"></span><h4 id="容器身上的属性"><a href="#容器身上的属性" class="headerlink" title="容器身上的属性"></a>容器身上的属性</h4><ol><li>决定主轴的方向<br> flex-direction: row | column | row-reverse | column-reverse ;</li><li>项目在主轴上的对齐方式<br> justify-content: center | space-between |space-around | space-evenly | flex-start | flex-end ;</li><li>项目在侧轴上的对齐方式<br> align-items: flex-start | flex-end | center | baseline | stretch（默认值，要在项目没有设置高度时候才能有效果）;</li><li>项目是否换行<br> flex-wrap: nowrap | wrap</li><li>多行元素排列方式（有多根侧轴）<br> align-content: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch（默认值）;</li><li>flex-flow<br> flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap;</li></ol><h4 id="项目身上的属性："><a href="#项目身上的属性：" class="headerlink" title="项目身上的属性："></a>项目身上的属性：</h4><ul><li>项目的排列顺序（元素默认的order是0，越大越后）    <pre><code>  order:数字;</code></pre></li><li>放大，项目如何分配剩余空间<pre><code>  flex-grow:数字;</code></pre></li><li>缩小，容器空间不够的时候，项目如何挤压排列（默认值为1，代表不会缩小，如果不缩小值为0)<pre><code>  flex-shrink:数字;</code></pre></li><li>复合属性<pre><code>  flex:1;  让元素放大，平均地占据剩余空间      flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。</code></pre></li><li>定义项目单独的排列方式<pre><code>  align-self: auto | flex-start | flex-end | center | baseline | stretch;</code></pre></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;弹性盒子&quot;&gt;&lt;a href=&quot;#弹性盒子&quot; class=&quot;headerlink&quot; title=&quot;弹性盒子&quot;&gt;&lt;/a&gt;弹性盒子&lt;/h2&gt;&lt;h4 id=&quot;弹性盒子概念&quot;&gt;&lt;a href=&quot;#弹性盒子概念&quot; class=&quot;headerlink&quot; title=&quot;弹性盒子概念&quot;&gt;&lt;/a&gt;弹性盒子概念&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;概念：是一种新的布局方式，让容器有能力控制里面元素的排列方式。&lt;/li&gt;
&lt;li&gt;容器：被设置了display: flex;的元素&lt;/li&gt;
&lt;li&gt;项目：容器里的子元素就是项目&lt;/li&gt;
&lt;li&gt;主轴：元素排列的方向，默认为X轴;&lt;/li&gt;
&lt;li&gt;侧轴：垂直于主轴的方向，默认为Y轴;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="html,css" scheme="http://example.com/categories/html-css/"/>
    
    
    <category term="html,css" scheme="http://example.com/tags/html-css/"/>
    
  </entry>
  
  <entry>
    <title>渐变过渡和动画</title>
    <link href="http://example.com/2021/07/08/html%E5%92%8Ccss/%E6%B8%90%E5%8F%98%E8%BF%87%E6%B8%A1%E5%92%8C%E5%8A%A8%E7%94%BB/"/>
    <id>http://example.com/2021/07/08/html%E5%92%8Ccss/%E6%B8%90%E5%8F%98%E8%BF%87%E6%B8%A1%E5%92%8C%E5%8A%A8%E7%94%BB/</id>
    <published>2021-07-07T16:00:00.000Z</published>
    <updated>2021-08-05T12:04:23.671Z</updated>
    
    <content type="html"><![CDATA[<h4 id="盒子模型的两种模式-标准模式-怪异模式"><a href="#盒子模型的两种模式-标准模式-怪异模式" class="headerlink" title="盒子模型的两种模式  标准模式 怪异模式"></a>盒子模型的两种模式  标准模式 怪异模式</h4><ul><li><p>概念：只是盒子模型的不同模式而已<br>元素实际占据的宽高的计算方式不同</p><blockquote><p>标准模式计算：元素实际占据的宽度：width + margin + padding + border<br>怪异模式计算：元素实际占据的宽度：width + margin</p></blockquote></li><li><p>语法：box-sizing :<br>border-box | content-box<br>&nbsp;怪异模式 &emsp;&nbsp;标准模式<br>有文档申明的就是标准模式，没有文档申明在IE6/7/8就是怪异模式</p></li></ul><span id="more"></span><h4 id="背景渐变"><a href="#背景渐变" class="headerlink" title="背景渐变"></a>背景渐变</h4><ol><li>线性渐变</li></ol><ul><li>普通<br>  background: linear-gradient(颜色1，颜色2)；</li><li>改变方向<br>  background:linear-gradient(to 方向，颜色1 ，颜色2)；</li><li>对角<br>  background:linear-gradient（to 垂直 水平 ,颜色1，颜色2）；</li><li>角度<br>  background:linear-gradient(*deg，颜色1，颜色2)顺时针</li><li>控制比例<br>  background:linear-gradient(*deg，颜色1 *%，颜色2 *%); 可以是前面1-4的任意写法，只需要在颜色后面加比例就行</li></ul><ol start="2"><li>径向渐变</li></ol><ul><li>普通<br>  background:radial-gradient(颜色1 ，颜色2);</li><li>控制比例-不均匀分布<br>  background:radial-gradient(颜色1 *% ，颜色2 *%);</li><li>控制图案  circle 圆圈  ellipse椭圆<br>  background:radial-gradient(circle 颜色1，颜色2);</li></ul><ol start="3"><li>重复渐变<br> repeating-radial-gradient()重复径向渐变<br> repeating-linear-gradient()重复线性渐变</li></ol><h4 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h4><p>语法:<br>    transition:渐变的属性 渐变的时间 渐变的延迟时间 变化的曲线;</p><h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><ol><li>定义动画</li></ol><ul><li>第一种   <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名&#123;</span><br><span class="line">    <span class="selector-tag">from</span>&#123;</span><br><span class="line">        动画开始时候的样式</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span>&#123;</span><br><span class="line">        动画结束时候的样式</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>第二种  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名&#123;</span><br><span class="line">    <span class="number">0%</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">50%</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>绑定-执行动画<br>animation:动画名&emsp;动画执行时间&emsp;动画执行次数&emsp;动画延迟时间&emsp;动画变化曲线&emsp;动画下一次执行的方向;<br>infinite(无数次)&emsp;&emsp;&emsp;&emsp;alternate(一个来回)<br>暂停动画：animation-play-state: paused;</li></ol>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;盒子模型的两种模式-标准模式-怪异模式&quot;&gt;&lt;a href=&quot;#盒子模型的两种模式-标准模式-怪异模式&quot; class=&quot;headerlink&quot; title=&quot;盒子模型的两种模式  标准模式 怪异模式&quot;&gt;&lt;/a&gt;盒子模型的两种模式  标准模式 怪异模式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;概念：只是盒子模型的不同模式而已&lt;br&gt;元素实际占据的宽高的计算方式不同&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;标准模式计算：元素实际占据的宽度：width + margin + padding + border&lt;br&gt;怪异模式计算：元素实际占据的宽度：width + margin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;语法：box-sizing :&lt;br&gt;border-box | content-box&lt;br&gt;&amp;nbsp;怪异模式 &amp;emsp;&amp;nbsp;标准模式&lt;br&gt;有文档申明的就是标准模式，没有文档申明在IE6/7/8就是怪异模式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="css" scheme="http://example.com/categories/css/"/>
    
    
    <category term="css" scheme="http://example.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css3的其他属性选择器</title>
    <link href="http://example.com/2021/07/07/html%E5%92%8Ccss/css3%E7%9A%84%E5%85%B6%E4%BB%96%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://example.com/2021/07/07/html%E5%92%8Ccss/css3%E7%9A%84%E5%85%B6%E4%BB%96%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8/</id>
    <published>2021-07-06T16:00:00.000Z</published>
    <updated>2021-08-05T11:49:08.998Z</updated>
    
    <content type="html"><![CDATA[<h4 id="css3兼容性处理"><a href="#css3兼容性处理" class="headerlink" title="css3兼容性处理"></a>css3兼容性处理</h4><p>方法：添加私有前缀<br>|代表浏览器|浏览器内核|前缀|<br>|:-:|:-:|:-:|<br>|欧鹏|presto|-o-|<br>|IE|trident|-ms-|<br>|火狐|gecko|-moz|<br>|谷歌|webkit|-webkit-|</p><h4 id="渐进增强和优雅降级（项目开发中的两种思想）"><a href="#渐进增强和优雅降级（项目开发中的两种思想）" class="headerlink" title="渐进增强和优雅降级（项目开发中的两种思想）"></a>渐进增强和优雅降级（项目开发中的两种思想）</h4><p>渐进增强：先完成最基本的功能，后面针对高版本的浏览器，再添加功能或者酷炫的效果。意味着向后看<br>优雅降级：先完成所有的功能，再针对低版本浏览器，进行功能，炫酷效果，交互的删减，保证最基本功能的实现。意味着向前看</p><span id="more"></span><h4 id="css3新增的属性"><a href="#css3新增的属性" class="headerlink" title="css3新增的属性"></a>css3新增的属性</h4><ol><li>文字阴影<br> text-shadow : x的偏移 y的偏移 模糊程度 阴影的颜色 ;</li><li>盒子阴影<br> box-shadow : x的偏移 y的偏移 模糊程度 阴影的颜色  inset ; (inset表示内阴影，不写就是外阴影)</li><li>圆角<br> border-radio</li></ol><h4 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h4><p>方法1：</p><ul><li>设置字体类型  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>:<span class="string">&quot;字体名称&quot;</span>;</span><br><span class="line">    <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">&quot;*.ttf</span>);设置字体文件路径</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在html中写对应的结构<br>  <b>对应图标的unicode</b></li><li>给图标设置字体类型为第一步设置的字体名称</li></ul><p>方法2：</p><ul><li>引入iconfont.css</li><li>加图标对应的类名就可以使用<br><code>&lt;span class=&#39;iconfont 类名&#39;&gt;&lt;/span&gt;</code></li></ul><h4 id="其他选择器"><a href="#其他选择器" class="headerlink" title="其他选择器"></a>其他选择器</h4><ol><li>属性选择器<br> e[attr] 匹配选择含有属性atter的e标签</li><li>结构伪类选择器<table><thead><tr><th align="center">选择器</th><th align="center">写法</th></tr></thead><tbody><tr><td align="center">选中第一个子元素e</td><td align="center">e:first-child{  }</td></tr><tr><td align="center">选中最后一个子元素e</td><td align="center">e:last-child{  }</td></tr><tr><td align="center">选中第m个子元素e</td><td align="center">e:nth-child(m){  }</td></tr><tr><td align="center">选中唯一的子元素e</td><td align="center">e:only-child{  }</td></tr><tr><td align="center">选中倒数第m个元素e</td><td align="center">e:nth-last-child(m){  }</td></tr><tr><td align="center">m是乘法因子，可以是数字，英文，数学表达式， 2n代表偶数（even） 2n+1代表奇数（odd）</td><td align="center"></td></tr></tbody></table></li></ol><p><strong>注意</strong>：child系列强调的是元素在所有的同级兄弟之间的排列顺序 【种类不限】<br>        type系列只是将chlid改成of-type，强调元素在所有同类型兄弟之间的排列顺序</p><ol start="3"><li><p>状态伪类选择器<br> e:disable {  }  选中不可用的e元素<br> e:enable {  }  选中可用的e元素<br> input:checked {  } 选中被选中的e元素</p></li><li><p>功能伪类选择器<br> 未激活的链接            :link<br> 激活的链接              :active<br> 已经访问的链接          :visited<br> 鼠标悬停                :hover</p></li><li><p>否定伪类选择器<br> e:not(f)        选中e元素中除去f的元素</p></li><li><p>目标伪类选择器<br> e:target{  }   选中为目标区域的元素e</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;css3兼容性处理&quot;&gt;&lt;a href=&quot;#css3兼容性处理&quot; class=&quot;headerlink&quot; title=&quot;css3兼容性处理&quot;&gt;&lt;/a&gt;css3兼容性处理&lt;/h4&gt;&lt;p&gt;方法：添加私有前缀&lt;br&gt;|代表浏览器|浏览器内核|前缀|&lt;br&gt;|:-:|:-:|:-:|&lt;br&gt;|欧鹏|presto|-o-|&lt;br&gt;|IE|trident|-ms-|&lt;br&gt;|火狐|gecko|-moz|&lt;br&gt;|谷歌|webkit|-webkit-|&lt;/p&gt;
&lt;h4 id=&quot;渐进增强和优雅降级（项目开发中的两种思想）&quot;&gt;&lt;a href=&quot;#渐进增强和优雅降级（项目开发中的两种思想）&quot; class=&quot;headerlink&quot; title=&quot;渐进增强和优雅降级（项目开发中的两种思想）&quot;&gt;&lt;/a&gt;渐进增强和优雅降级（项目开发中的两种思想）&lt;/h4&gt;&lt;p&gt;渐进增强：先完成最基本的功能，后面针对高版本的浏览器，再添加功能或者酷炫的效果。意味着向后看&lt;br&gt;优雅降级：先完成所有的功能，再针对低版本浏览器，进行功能，炫酷效果，交互的删减，保证最基本功能的实现。意味着向前看&lt;/p&gt;</summary>
    
    
    
    <category term="css" scheme="http://example.com/categories/css/"/>
    
    
    <category term="css" scheme="http://example.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>表单其他标签和属性</title>
    <link href="http://example.com/2021/07/06/html%E5%92%8Ccss/html5%E6%96%B0%E5%A2%9E%E7%9A%84%E8%AF%AD%E4%B9%89%E6%A0%87%E7%AD%BE/"/>
    <id>http://example.com/2021/07/06/html%E5%92%8Ccss/html5%E6%96%B0%E5%A2%9E%E7%9A%84%E8%AF%AD%E4%B9%89%E6%A0%87%E7%AD%BE/</id>
    <published>2021-07-05T16:00:00.000Z</published>
    <updated>2021-08-05T11:34:03.753Z</updated>
    
    <content type="html"><![CDATA[<h4 id="标签语义化"><a href="#标签语义化" class="headerlink" title="标签语义化"></a>标签语义化</h4><ul><li><p>概括：语义就是有意义，要用正确的标签描述相应的内容，见名知意</p></li><li><p>好处：<br>  代码具有可读性<br>  方便SEO（搜索引擎优化）</p></li><li><p>新增的标签<br>  |标签|标签名|<br>  |:—:|:—:|:—:|<br>  |页头|header|<br>  |页脚|footer |<br>  |侧栏|aside  |<br>  |独立区域块|section|<br>  |主体|main|<br>  |导航|nav|<br>  |文章|article|</p></li></ul><span id="more"></span><h4 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h4><ul><li><p>音频</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&#x27;音频的路径&#x27;</span> <span class="attr">controls</span>   <span class="attr">autoplay</span>   <span class="attr">loop</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  controls       控件<br>  autoplay       自动播放<br>  loop           循环</p></li><li><p>视频</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&#x27;视频地路径&#x27;</span>  <span class="attr">controls</span>  <span class="attr">poster</span>=<span class="string">&#x27;海报的路径&#x27;</span>&gt;</span>不能识别video标签时候显示的内容<span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="html5新增的type属性值和属性"><a href="#html5新增的type属性值和属性" class="headerlink" title="html5新增的type属性值和属性"></a>html5新增的type属性值和属性</h4><ul><li>type属性值  ：email  url（网址）  number <br></li><li>type新增的属性 ： <table><thead><tr><th align="center">属性</th><th align="center">属性名</th></tr></thead><tbody><tr><td align="center">验证表单数据的正确性</td><td align="center">novalidate(用在form身上，不验证)</td></tr><tr><td align="center">必须填内容</td><td align="center">required</td></tr><tr><td align="center">提示符</td><td align="center">placeholder</td></tr><tr><td align="center">自动获取焦点</td><td align="center">autofocus</td></tr><tr><td align="center">最大长度</td><td align="center">maxlength</td></tr><tr><td align="center">自动补全</td><td align="center">autocomplete=’on’</td></tr><tr><td align="center"><br></td><td align="center"></td></tr></tbody></table></li><li>html5新增的标签<br> 数据列表<br>  语法：  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">list</span>=<span class="string">&#x27;id名&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&#x27;id名&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;&#x27;</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;标签语义化&quot;&gt;&lt;a href=&quot;#标签语义化&quot; class=&quot;headerlink&quot; title=&quot;标签语义化&quot;&gt;&lt;/a&gt;标签语义化&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;概括：语义就是有意义，要用正确的标签描述相应的内容，见名知意&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;好处：&lt;br&gt;  代码具有可读性&lt;br&gt;  方便SEO（搜索引擎优化）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新增的标签&lt;br&gt;  |标签|标签名|&lt;br&gt;  |:—:|:—:|:—:|&lt;br&gt;  |页头|header|&lt;br&gt;  |页脚|footer |&lt;br&gt;  |侧栏|aside  |&lt;br&gt;  |独立区域块|section|&lt;br&gt;  |主体|main|&lt;br&gt;  |导航|nav|&lt;br&gt;  |文章|article|&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="html" scheme="http://example.com/categories/html/"/>
    
    
    <category term="html" scheme="http://example.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>表单其他标签和属性</title>
    <link href="http://example.com/2021/07/05/html%E5%92%8Ccss/%E8%A1%A8%E5%8D%95%E5%85%B6%E4%BB%96%E6%A0%87%E7%AD%BE%E5%92%8C%E5%B1%9E%E6%80%A7/"/>
    <id>http://example.com/2021/07/05/html%E5%92%8Ccss/%E8%A1%A8%E5%8D%95%E5%85%B6%E4%BB%96%E6%A0%87%E7%AD%BE%E5%92%8C%E5%B1%9E%E6%80%A7/</id>
    <published>2021-07-04T16:00:00.000Z</published>
    <updated>2021-08-05T11:19:23.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="表单其他标签和属性"><a href="#表单其他标签和属性" class="headerlink" title="表单其他标签和属性"></a>表单其他标签和属性</h2><h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><ul><li>组成：表单标签 + 表单域 + 表单按钮</li><li>表单标签：form——负责数据提交的地址和方式</li><li>表单域：数据填入的部分  文本框和密码框</li><li>表单按钮：提交、重置、普通按钮</li></ul><h4 id="表单按钮"><a href="#表单按钮" class="headerlink" title="表单按钮"></a>表单按钮</h4><ul><li>语法：  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit  reset  button&quot;</span>&gt;</span>按钮上显示的文字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">或者 </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit  reset  button&quot;</span>   <span class="attr">value</span>=<span class="string">&quot;按钮上显示的文字&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><span id="more"></span><h4 id="input的其他type属性值"><a href="#input的其他type属性值" class="headerlink" title="input的其他type属性值"></a>input的其他type属性值</h4><ul><li>语法：  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text/password/radio/checkbox/file/hidden&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>  file是提交文件<br>  hidden是隐藏域：提交不想被用户看到的数据的时候。&lt;用value设置要提交的数据&gt;<pre><code>  &lt;input type=&quot;hidden&quot; value=&quot;提交的数据&quot;  name=&quot;名字&quot;&gt;</code></pre></li></ul><h4 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h4><ul><li><p>lable标签<br>  语法1：</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;id名&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;对应选项的id名&quot;</span>&gt;</span>要关联的内容<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  语法2：</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">lable</span>&gt;</span><span class="tag">&lt;<span class="name">input</span>&gt;</span>要关联的内容<span class="tag">&lt;/<span class="name">lable</span>&gt;</span>  lable身上不可以有for属性</span><br></pre></td></tr></table></figure></li><li><p>下拉框（下拉列表）</p>  <select name="">      <option value="值">选项的值</option>      <option selected>默认选中</option>  </select>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;值&quot;</span>&gt;</span>选项的值<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>默认选中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  注意： 提交到后端的数据默认是value的值，如果没有就提交option里面的内容<br>  selected代表默认选中该项</p></li></ul><ul><li><p>文本域</p>  <textarea name=""></textarea>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>表单字段集</p>  <fieldset>      <legend>描述</legend>      <p>这里面可以放表单</p>  </fieldset>  <br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span><span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="BFC概念及应用"><a href="#BFC概念及应用" class="headerlink" title="BFC概念及应用"></a>BFC概念及应用</h4><p>概念：是块级格式化上下文，是一种规范，规定了元素的排列方式，不同的BFC里面的元素的排列是互不影响的。<br>创建BFC的情况：<br>    1.浮动<br>    2.overflow<br>    3.display: inline-block / flex<br>    4.position: fixed / absolute<br>应用：<br>    1.解决margin的粘连问题（父子）<br>        方式1：给父元素设置透明边框  transparent<br>        方式2：用padding实现（修改高度）<br>        方式3：给父元素设置overflow: hidden;<br>    【所有让父元素或者子元素触发BFC的代码，都能解决粘连】<br>    2.margin的塌陷问题（兄弟之间）<br>        在一个兄弟身上设置足够的间隔<br>    3.清除浮动<br>    4.布局 【左边固定，右边自适应 / 左中右布局】</p><h4 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h4><ul><li><p>概念：同一个页面在不同的浏览器、版本里面效果不统一。</p><table><thead><tr><th align="center">代表浏览器</th><th align="center">浏览器内核</th><th align="center">前缀</th></tr></thead><tbody><tr><td align="center">欧鹏</td><td align="center">presto</td><td align="center">-o-</td></tr><tr><td align="center">IE</td><td align="center">trident</td><td align="center">-ms-</td></tr><tr><td align="center">火狐</td><td align="center">gecko</td><td align="center">-moz</td></tr><tr><td align="center">谷歌</td><td align="center">webkit</td><td align="center">-webkit-</td></tr></tbody></table></li><li><p>常见的兼容性问题：</p><ul><li>图片3像素问题  解决方案：图片设置vertical-align或者转换为块级元素</li><li>行内块元素之间默认间隔   解决方案：加浮动</li><li>图片外面有链接时候在低版本浏览器里有边框  解决方案：给图片边框设置为0</li><li>png24在IE6里面不是透明的    解决方案：使用png8 或者 gif</li><li>表单元素垂直方面不对齐    解决方案：使用浮动 或者 vertical-align:top;</li><li>鼠标移入，实现手型   解决方案：  cursor:hand; 和 cursor:pointer;</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;表单其他标签和属性&quot;&gt;&lt;a href=&quot;#表单其他标签和属性&quot; class=&quot;headerlink&quot; title=&quot;表单其他标签和属性&quot;&gt;&lt;/a&gt;表单其他标签和属性&lt;/h2&gt;&lt;h4 id=&quot;表单&quot;&gt;&lt;a href=&quot;#表单&quot; class=&quot;headerlink&quot; title=&quot;表单&quot;&gt;&lt;/a&gt;表单&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;组成：表单标签 + 表单域 + 表单按钮&lt;/li&gt;
&lt;li&gt;表单标签：form——负责数据提交的地址和方式&lt;/li&gt;
&lt;li&gt;表单域：数据填入的部分  文本框和密码框&lt;/li&gt;
&lt;li&gt;表单按钮：提交、重置、普通按钮&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;表单按钮&quot;&gt;&lt;a href=&quot;#表单按钮&quot; class=&quot;headerlink&quot; title=&quot;表单按钮&quot;&gt;&lt;/a&gt;表单按钮&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;语法：  &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;submit  reset  button&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;按钮上显示的文字&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;或者 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;submit  reset  button&amp;quot;&lt;/span&gt;   &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;按钮上显示的文字&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="html,css" scheme="http://example.com/categories/html-css/"/>
    
    
    <category term="html,css" scheme="http://example.com/tags/html-css/"/>
    
  </entry>
  
  <entry>
    <title>常见的布局</title>
    <link href="http://example.com/2021/07/02/html%E5%92%8Ccss/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%B8%83%E5%B1%80/"/>
    <id>http://example.com/2021/07/02/html%E5%92%8Ccss/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%B8%83%E5%B1%80/</id>
    <published>2021-07-01T16:00:00.000Z</published>
    <updated>2021-08-05T09:49:04.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见的页面布局"><a href="#常见的页面布局" class="headerlink" title="常见的页面布局"></a>常见的页面布局</h2><p>前言：在写页面时，很多页面的布局都是固定的，这篇文章就主要介绍了常见的页面布局</p><ol><li>上面固定，下面自适应</li><li>上面下面固定，中间自适应</li><li>左边固定，右边自适应</li><li>左边右边固定，中间自适应</li></ol><span id="more"></span><h4 id="上面固定，下面是自适应"><a href="#上面固定，下面是自适应" class="headerlink" title="上面固定，下面是自适应"></a>上面固定，下面是自适应</h4><p>上面和下面都设置大小和绝对定位<br>下面不设置高度，且下面多设置一个bottom:0; top: 上面盒子的高度；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        *&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>:skyblue;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">           </span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>固定<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="上面下面固定，中间自适应"><a href="#上面下面固定，中间自适应" class="headerlink" title="上面下面固定，中间自适应"></a>上面下面固定，中间自适应</h4><p>上面下面和中间都设置大小和绝对定位<br>中间不设置高度，且中间多设置一个bottom:下面盒子的高度; top: 上面盒子的高度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    * &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">html</span>,<span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.top</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.center</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">        <span class="attribute">top</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">bottom</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.bottom</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>:skyblue;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="左边固定，右边自适应"><a href="#左边固定，右边自适应" class="headerlink" title="左边固定，右边自适应"></a>左边固定，右边自适应</h4><p>左边设置宽，设置左浮动<br>右边设置overflow:hidden;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    *&#123;  <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>:pink;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>固定<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="左边右边固定，中间自适应"><a href="#左边右边固定，中间自适应" class="headerlink" title="左边右边固定，中间自适应"></a>左边右边固定，中间自适应</h4><p>左边中间设置固定宽高，左边左浮动，中间右浮动<br>中间设置overflow:hidden;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    *&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: lightcoral;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.center</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: lightpink;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: seagreen;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p>常用属性<br>    border-collapse:collapse; 实现表格细边框【如果实现真正的细边框，要设置border】<br>    table-layout:fixed;   单元格按格子均分表格的宽度 【表格必须设置宽度】</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;常见的页面布局&quot;&gt;&lt;a href=&quot;#常见的页面布局&quot; class=&quot;headerlink&quot; title=&quot;常见的页面布局&quot;&gt;&lt;/a&gt;常见的页面布局&lt;/h2&gt;&lt;p&gt;前言：在写页面时，很多页面的布局都是固定的，这篇文章就主要介绍了常见的页面布局&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;上面固定，下面自适应&lt;/li&gt;
&lt;li&gt;上面下面固定，中间自适应&lt;/li&gt;
&lt;li&gt;左边固定，右边自适应&lt;/li&gt;
&lt;li&gt;左边右边固定，中间自适应&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="html,css" scheme="http://example.com/categories/html-css/"/>
    
    
    <category term="html,css" scheme="http://example.com/tags/html-css/"/>
    
  </entry>
  
  <entry>
    <title>宽高自适应</title>
    <link href="http://example.com/2021/07/01/html%E5%92%8Ccss/%E5%AE%BD%E9%AB%98%E8%87%AA%E9%80%82%E5%BA%94/"/>
    <id>http://example.com/2021/07/01/html%E5%92%8Ccss/%E5%AE%BD%E9%AB%98%E8%87%AA%E9%80%82%E5%BA%94/</id>
    <published>2021-06-30T16:00:00.000Z</published>
    <updated>2021-08-05T09:38:37.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="宽高自适应"><a href="#宽高自适应" class="headerlink" title="宽高自适应"></a>宽高自适应</h2><ul><li> 概念：根据设备、分辨率不同，有不一样的排版布局</li><li><h5 id="宽度自适应"><a href="#宽度自适应" class="headerlink" title="宽度自适应"></a>宽度自适应</h5><ol><li>不设置宽度</li><li>设置百分比</li><li>使用 min-width 或者 max-width;<br>  min-width:*px; 设置最小宽度<br>  max-width:*px; 设置最大宽度</li></ol></li></ul><span id="more"></span><ul><li><h5 id="高度自适应"><a href="#高度自适应" class="headerlink" title="高度自适应"></a>高度自适应</h5><ol><li>不设置高度<br>  注意：如果子元素有浮动，会高度塌陷</li></ol><p>  <strong>清除浮动</strong></p><ul><li><p>给浮动元素的父亲设置 overflow:hidden;</p></li><li><p>给浮动元素添加一个空的兄弟元素div，类名叫clear，并设置样式 </p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.claer</span>&#123;</span></span><br><span class="line"><span class="css">        claer: both;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>给浮动元素的父级添加类名 clearfix,设置样式</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>:after&#123;</span><br><span class="line">    content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>设置百分比</li><li>使用 min-height 或者 max-height;<br> min-height:*px; 设置最小高度<br> max-height :*px; 设置最大高度</li></ol></li><li><h5 id="伪类和伪元素的区别"><a href="#伪类和伪元素的区别" class="headerlink" title="伪类和伪元素的区别"></a>伪类和伪元素的区别</h5><ul><li>概念上：<br>伪类是一种临时状态，只有状态被触发的时候才会有效<br>伪元素是一种虚拟的元素，是假的dom节点。</li><li>写法上：<br>伪类使用单冒号，伪元素使用双冒号。<br>:after  ::after       只是版本区别，都是伪元素<br>:before ::before</li></ul> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e:after&#123;  content:<span class="string">&#x27;&#x27;</span>; &#125;  在e元素的内容后面添加内容</span><br><span class="line">e:before&#123;  content:<span class="string">&#x27;&#x27;</span>; &#125;  在e元素的内容前面添加内容</span><br><span class="line">e<span class="selector-pseudo">::selection</span>&#123;  &#125;  给e元素选中的文字设置样式</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;宽高自适应&quot;&gt;&lt;a href=&quot;#宽高自适应&quot; class=&quot;headerlink&quot; title=&quot;宽高自适应&quot;&gt;&lt;/a&gt;宽高自适应&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt; 概念：根据设备、分辨率不同，有不一样的排版布局&lt;/li&gt;
&lt;li&gt;&lt;h5 id=&quot;宽度自适应&quot;&gt;&lt;a href=&quot;#宽度自适应&quot; class=&quot;headerlink&quot; title=&quot;宽度自适应&quot;&gt;&lt;/a&gt;宽度自适应&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;不设置宽度&lt;/li&gt;
&lt;li&gt;设置百分比&lt;/li&gt;
&lt;li&gt;使用 min-width 或者 max-width;&lt;br&gt;  min-width:*px; 设置最小宽度&lt;br&gt;  max-width:*px; 设置最大宽度&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="css" scheme="http://example.com/categories/css/"/>
    
    
    <category term="css" scheme="http://example.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>定位锚点和透明</title>
    <link href="http://example.com/2021/06/30/html%E5%92%8Ccss/%E5%AE%9A%E4%BD%8D%E9%94%9A%E7%82%B9%E5%92%8C%E9%80%8F%E6%98%8E/"/>
    <id>http://example.com/2021/06/30/html%E5%92%8Ccss/%E5%AE%9A%E4%BD%8D%E9%94%9A%E7%82%B9%E5%92%8C%E9%80%8F%E6%98%8E/</id>
    <published>2021-06-29T16:00:00.000Z</published>
    <updated>2021-08-04T12:59:35.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定位锚点和透明"><a href="#定位锚点和透明" class="headerlink" title="定位锚点和透明"></a>定位锚点和透明</h2><h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><ul><li><p>概念：将一个元素放在指定的位置上</p></li><li><p>语法：position:定位方式</p></li><li><p>坐标：<br>  left:*px / right:*px<br>  top: *px / bottom:*px</p></li><li><p>定位方式：<br>  static ：静态定位，元素的默认定位方式<br>  fixed ：固定定位，基于浏览器窗口进行位置移动</p>  <span id="more"></span><p>  <strong>盒子居中:</strong><br>  方式一：</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>；fixed;</span><br><span class="line"><span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: — 盒子高度的一半</span><br><span class="line">left:<span class="number">50%</span></span><br><span class="line">margin-left: — 盒子宽度的一半</span><br></pre></td></tr></table></figure><p>  方式二：</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">margin</span>:auto;</span><br></pre></td></tr></table></figure><p>relative : 相对定位，基于元素本身的位置进行移动<br>absolute : 绝对定位，基于被设置非静态定位的最近上级元素进行定位。如果都没有，基于浏览器当前屏进行定位。<br>sticky : 粘性定位<br>子绝父相</p></li></ul><h4 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id名&quot;</span>&gt;</span>跳转的区域<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#id名&quot;</span>&gt;</span>链接文字<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="透明度"><a href="#透明度" class="headerlink" title="透明度"></a>透明度</h4><p>opacity:0-1; (0完全透明，1完全不透明)<br>兼容低版本IE用 filter:alpha (opacity = 0-100)</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;定位锚点和透明&quot;&gt;&lt;a href=&quot;#定位锚点和透明&quot; class=&quot;headerlink&quot; title=&quot;定位锚点和透明&quot;&gt;&lt;/a&gt;定位锚点和透明&lt;/h2&gt;&lt;h4 id=&quot;定位&quot;&gt;&lt;a href=&quot;#定位&quot; class=&quot;headerlink&quot; title=&quot;定位&quot;&gt;&lt;/a&gt;定位&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;概念：将一个元素放在指定的位置上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;语法：position:定位方式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;坐标：&lt;br&gt;  left:*px / right:*px&lt;br&gt;  top: *px / bottom:*px&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定位方式：&lt;br&gt;  static ：静态定位，元素的默认定位方式&lt;br&gt;  fixed ：固定定位，基于浏览器窗口进行位置移动&lt;/p&gt;</summary>
    
    
    
    <category term="html,css" scheme="http://example.com/categories/html-css/"/>
    
    
    <category term="html,css" scheme="http://example.com/tags/html-css/"/>
    
  </entry>
  
  <entry>
    <title>元素类型</title>
    <link href="http://example.com/2021/06/29/html%E5%92%8Ccss/%E5%85%83%E7%B4%A0%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2021/06/29/html%E5%92%8Ccss/%E5%85%83%E7%B4%A0%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-06-28T16:00:00.000Z</published>
    <updated>2021-08-04T12:50:42.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="元素类型"><a href="#元素类型" class="headerlink" title="元素类型"></a>元素类型</h2><h4 id="1-元素的分类"><a href="#1-元素的分类" class="headerlink" title="1. 元素的分类"></a>1. 元素的分类</h4><p>块级元素：独占整行，可以设置宽高<br>行级元素：有多宽占多宽，不可以设宽高<br>行内块元素： 有多宽占多宽，可以设宽高。   【img input button 】</p><h6 id="元素嵌套的规则"><a href="#元素嵌套的规则" class="headerlink" title="元素嵌套的规则"></a>元素嵌套的规则</h6><p>   行级元素只能包行级元素，块级元素可以包裹行级和块级元素<br>   <code>&lt;a&gt;</code> 可以包裹块级元素<br>   <code>&lt;p&gt;</code> 里面不能有块级元素</p><p>置换元素：浏览器根据元素的标签和属性，决定显示的内容。    image input button等<br>非置换元素：除去置换元素，剩余的都是非置换元素。</p><h4 id="2-元素类型的转换"><a href="#2-元素类型的转换" class="headerlink" title="2. 元素类型的转换"></a>2. 元素类型的转换</h4><p>display: block / inline-block / none / inline<br>block: 显示为块<br>inline-block: 显示为行内块<br>none: 隐藏<br>inline: 显示为行</p><h4 id="3-vertical-align-top-middle-垂直对齐"><a href="#3-vertical-align-top-middle-垂直对齐" class="headerlink" title="3. vertical-align: top / middle 垂直对齐"></a>3. vertical-align: top / middle 垂直对齐</h4><p>应用场景：<br>1.解决图片3px问题；<br>实现表格内容垂直对齐方式设置；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;元素类型&quot;&gt;&lt;a href=&quot;#元素类型&quot; class=&quot;headerlink&quot; title=&quot;元素类型&quot;&gt;&lt;/a&gt;元素类型&lt;/h2&gt;&lt;h4 id=&quot;1-元素的分类&quot;&gt;&lt;a href=&quot;#1-元素的分类&quot; class=&quot;headerlink&quot; title=&quot;1. </summary>
      
    
    
    
    <category term="html,css" scheme="http://example.com/categories/html-css/"/>
    
    
    <category term="html,css" scheme="http://example.com/tags/html-css/"/>
    
  </entry>
  
  <entry>
    <title>文本溢出相关属性</title>
    <link href="http://example.com/2021/06/28/html%E5%92%8Ccss/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7/"/>
    <id>http://example.com/2021/06/28/html%E5%92%8Ccss/%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7/</id>
    <published>2021-06-27T16:00:00.000Z</published>
    <updated>2021-08-04T12:47:22.504Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单行文本溢出显示省略号"><a href="#单行文本溢出显示省略号" class="headerlink" title="单行文本溢出显示省略号"></a>单行文本溢出显示省略号</h3><ol><li>设置宽度                  width:*px;</li><li>强制不换行                white-space:nowrap;</li><li>溢出隐藏                  overflow:hidden;</li><li>文本溢出的标识为省略号     text-overflow:ellipsis;</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;单行文本溢出显示省略号&quot;&gt;&lt;a href=&quot;#单行文本溢出显示省略号&quot; class=&quot;headerlink&quot; title=&quot;单行文本溢出显示省略号&quot;&gt;&lt;/a&gt;单行文本溢出显示省略号&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;设置宽度                  width:</summary>
      
    
    
    
    <category term="css" scheme="http://example.com/categories/css/"/>
    
    
    <category term="css" scheme="http://example.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>CSS核心属性</title>
    <link href="http://example.com/2021/06/25/html%E5%92%8Ccss/CSS%E6%A0%B8%E5%BF%83%E5%B1%9E%E6%80%A7/"/>
    <id>http://example.com/2021/06/25/html%E5%92%8Ccss/CSS%E6%A0%B8%E5%BF%83%E5%B1%9E%E6%80%A7/</id>
    <published>2021-06-24T16:00:00.000Z</published>
    <updated>2021-08-04T12:46:26.887Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS核心属性"><a href="#CSS核心属性" class="headerlink" title="CSS核心属性"></a>CSS核心属性</h2><h4 id="一、文本属性"><a href="#一、文本属性" class="headerlink" title="一、文本属性"></a>一、文本属性</h4><ol><li>字体大小——font-size:  ; <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">单位：px  像素</span><br><span class="line">      em  基于父级的倍数</span><br><span class="line">      rem 基于根目录（html）的倍数</span><br></pre></td></tr></table></figure></li><li>颜色color <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">颜色的英文/#16进制值/rgb(R,G,B)/rgba(R,G,B,透明度)</span><br></pre></td></tr></table></figure></li><li>文字粗细 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-weight</span>:<span class="number">400</span>/normal|<span class="number">700</span>/bold;</span><br></pre></td></tr></table></figure><span id="more"></span></li><li>字体类型 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-family</span>:<span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>字体样式 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-style</span>:noraml/italic;</span><br></pre></td></tr></table></figure></li><li>行高 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">line-height</span>:*px;</span><br></pre></td></tr></table></figure></li><li>文字水平对齐 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-align</span>:center/left/right/<span class="built_in">justify</span>(两端对齐)</span><br></pre></td></tr></table></figure></li><li>文本缩进 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-indent</span>:  行级元素不生效</span><br></pre></td></tr></table></figure></li><li>修饰线 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-decoration</span>:<span class="built_in">underline</span>(下划线)/<span class="built_in">line-through</span>(删除线)/<span class="built_in">none</span>(用于去除链接下划线);</span><br></pre></td></tr></table></figure></li><li>font复合属性<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font</span>:font-style font-weight font-size/line-height font-family; </span><br></pre></td></tr></table></figure>最少要写字体大小和类型</li><li>字间距<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">letter-spacing</span>:</span><br></pre></td></tr></table></figure></li></ol><h4 id="二、列表属性"><a href="#二、列表属性" class="headerlink" title="二、列表属性"></a>二、列表属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">list-style</span>:none; 去掉序列的样式</span><br></pre></td></tr></table></figure><h4 id="三、继承"><a href="#三、继承" class="headerlink" title="三、继承"></a>三、继承</h4><p>有上下级关系的元素之间，上级元素的样式被下级拥有</p><h4 id="四、背景属性"><a href="#四、背景属性" class="headerlink" title="四、背景属性"></a>四、背景属性</h4><ol><li>背景颜色 background-color </li><li>背景图片 background-image:url( );</li><li>背景平铺 background-repeat:no-repeat/repeat/repeat-X/repeat-Y;</li><li>背景起始位置 background-position:x坐标 y坐标；（居中 background-position:center center;)</li><li>背景图片的固定 background-attachment：scroll(滚动）/fixed（固定）</li><li>背景图片的大小 background-size：宽度 高度；</li></ol><h4 id="五、精灵图"><a href="#五、精灵图" class="headerlink" title="五、精灵图"></a>五、精灵图</h4><ol><li>实现一个指定大小的盒子</li><li>设置精灵图为背景图</li><li>通过background-position来调整背景图的位置</li></ol><p>优缺点： 性能好，命名少，步骤繁琐，增添图标麻烦</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;CSS核心属性&quot;&gt;&lt;a href=&quot;#CSS核心属性&quot; class=&quot;headerlink&quot; title=&quot;CSS核心属性&quot;&gt;&lt;/a&gt;CSS核心属性&lt;/h2&gt;&lt;h4 id=&quot;一、文本属性&quot;&gt;&lt;a href=&quot;#一、文本属性&quot; class=&quot;headerlink&quot; title=&quot;一、文本属性&quot;&gt;&lt;/a&gt;一、文本属性&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;字体大小——font-size:  ; &lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;单位：px  像素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      em  基于父级的倍数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      rem 基于根目录（html）的倍数&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;颜色color &lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;颜色的英文/#16进制值/rgb(R,G,B)/rgba(R,G,B,透明度)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;文字粗细 &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;font-weight&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;/normal|&lt;span class=&quot;number&quot;&gt;700&lt;/span&gt;/bold;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="css" scheme="http://example.com/categories/css/"/>
    
    
    <category term="css" scheme="http://example.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>浮动和盒子模型</title>
    <link href="http://example.com/2021/06/24/html%E5%92%8Ccss/%E6%B5%AE%E5%8A%A8%E5%92%8C%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <id>http://example.com/2021/06/24/html%E5%92%8Ccss/%E6%B5%AE%E5%8A%A8%E5%92%8C%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</id>
    <published>2021-06-23T16:00:00.000Z</published>
    <updated>2021-08-04T12:46:22.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浮动和盒子模型"><a href="#浮动和盒子模型" class="headerlink" title="浮动和盒子模型"></a>浮动和盒子模型</h2><h4 id="元素的分类"><a href="#元素的分类" class="headerlink" title="元素的分类"></a>元素的分类</h4><ul><li>块级元素：独占整行，可以设置宽高</li><li>行级元素：有多宽占多宽，不可以设宽高</li><li>行内块元素： 有多宽占多宽，可以设宽高。   【img input button 】</li></ul><span id="more"></span><h4 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h4><ul><li>语法：<br>  <code>float:left 或者 right;</code></li><li>作用：<br>让元素横着排列，实现一行多列效果<br>设置文字环绕方式</li></ul><p>注意：浮动会让元素脱离文档流</p><h4 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h4><p>概念：是一种思维模型，宽高+内边距+外边距+边框，主要用于页面布局。</p><ol><li>尺寸</li></ol><ul><li>设置宽度：  width: *px 或者 *%;</li><li>设置高度：  height:*px 或者 *%;</li></ul><ol start="2"><li>内边距:内容和盒子边缘之间的间隔</li></ol><ul><li>设置指定方向的内边距   【padding-方向：*px;】 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding-top</span>:上方向</span><br><span class="line">padding-bottom:下方向</span><br><span class="line">padding-left:左方向</span><br><span class="line">padding-right:右方向</span><br></pre></td></tr></table></figure></li><li>一次性设置多个方向：  padding:*px;  </li><li>值可以是1-4个：从上方向出发，顺时针对应，有缺省取对边。</li></ul><p>注意：内边距会撑大盒子。</p><ol start="3"><li>外边距：盒子a与盒子b之间的间隔</li></ol><ul><li>设置指定方向的外边距  margin-方向：*px;</li><li>一次性设置多个方向：  margin：*px;  对应规则同padding</li></ul><ol start="4"><li>边框</li></ol><ul><li>设置单个方向的边框<br>border-方向：*px solid 颜色;</li><li>设置4个方向的边框<br>border：*px solid 颜色;<br>solid实线  dashed虚线</li></ul><h4 id="盒子模型相关的细节说明："><a href="#盒子模型相关的细节说明：" class="headerlink" title="盒子模型相关的细节说明："></a>盒子模型相关的细节说明：</h4><ul><li><p>给所有元素清除内外边距<br>  *{</p><pre><code>  margin:0;  padding:0;</code></pre><p>  }</p></li><li><p> 可内可外，优先内。</p></li><li><p> 盒子水平居中，使用margin：0 auto;</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;浮动和盒子模型&quot;&gt;&lt;a href=&quot;#浮动和盒子模型&quot; class=&quot;headerlink&quot; title=&quot;浮动和盒子模型&quot;&gt;&lt;/a&gt;浮动和盒子模型&lt;/h2&gt;&lt;h4 id=&quot;元素的分类&quot;&gt;&lt;a href=&quot;#元素的分类&quot; class=&quot;headerlink&quot; title=&quot;元素的分类&quot;&gt;&lt;/a&gt;元素的分类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;块级元素：独占整行，可以设置宽高&lt;/li&gt;
&lt;li&gt;行级元素：有多宽占多宽，不可以设宽高&lt;/li&gt;
&lt;li&gt;行内块元素： 有多宽占多宽，可以设宽高。   【img input button 】&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="css" scheme="http://example.com/categories/css/"/>
    
    
    <category term="css" scheme="http://example.com/tags/css/"/>
    
  </entry>
  
</feed>
